<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cudafy.Math</name>
    </assembly>
    <members>
        <member name="T:Cudafy.Maths.BLAS.CudaBLAS">
            <summary>
            Wrapper around CUBLAS.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.BLAS.GPGPUBLAS">
            <summary>
            Abstract base class for devices supporting BLAS.
            Warning: This code has received limited testing.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.Create(Cudafy.Host.GPGPU)">
            <summary>
            Creates a BLAS wrapper based on the specified gpu.
            </summary>
            <param name="gpu">The gpu.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cudafy.Maths.BLAS.GPGPUBLAS"/> class.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Cudafy.Maths.BLAS.GPGPUBLAS"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.IAMAX(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            IAMAXs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.IAMAX(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            IAMAXs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.IAMAX(Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32)">
            <summary>
            IAMAXs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.IAMAX(Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32)">
            <summary>
            IAMAXs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.IAMIN(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            IAMINs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.IAMIN(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            IAMINs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.IAMIN(Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32)">
            <summary>
            IAMINs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.IAMIN(Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32)">
            <summary>
            IAMINs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ASUM(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            ASUMs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ASUM(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            ASUMs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ASUM(Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32)">
            <summary>
            ASUMs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ASUM(Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32)">
            <summary>
            ASUMs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.AXPY(System.Single,System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            AXPYs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.AXPY(System.Double,System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            AXPYs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.AXPY(Cudafy.Types.ComplexF,Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            AXPYs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.AXPY(Cudafy.Types.ComplexD,Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            AXPYs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.AXPY(System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            AXPYs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.AXPY(System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            AXPYs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.AXPY(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            AXPYs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.AXPY(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            AXPYs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.COPY(System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            COPYs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.COPY(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            COPYs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.COPY(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            COPYs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.COPY(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            COPYs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.DOT(System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            DOTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.DOT(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            DOTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.DOTU(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            DOTUs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.DOTC(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            DOTCs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.DOTU(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            DOTUs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.DOTC(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            DOTCs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.NRM2(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            NRs the m2.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.NRM2(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            NRs the m2.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.NRM2(Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32)">
            <summary>
            NRs the m2.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.NRM2(Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32)">
            <summary>
            NRs the m2.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(System.Single[],System.Single[],System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(System.Double[],System.Double[],System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Single,Cudafy.Types.ComplexF,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Double,Cudafy.Types.ComplexD,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Single[],Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Double[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROT(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTG(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            ROTGs the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTG(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            ROTGs the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTG(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Single[],Cudafy.Types.ComplexF[])">
            <summary>
            ROTGs the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTG(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Double[],Cudafy.Types.ComplexD[])">
            <summary>
            ROTGs the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTM(System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTMs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="param">The param.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTM(System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ROTMs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="param">The param.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTMG(System.Single@,System.Single@,System.Single@,System.Single@,System.Single[])">
            <summary>
            ROTMGs the specified d1.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="param">The param.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTMG(System.Double@,System.Double@,System.Double@,System.Double@,System.Double[])">
            <summary>
            ROTMGs the specified d1.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="param">The param.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTMG(System.Single[],System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            ROTMGs the specified d1.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="param">The param.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.ROTMG(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            ROTMGs the specified d1.
            </summary>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="param">The param.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(System.Single,System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(System.Double,System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(Cudafy.Types.ComplexF,Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(System.Single,Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(Cudafy.Types.ComplexD,Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(System.Double,Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(System.Single[],System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(System.Single[],Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SCAL(System.Double[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32)">
            <summary>
            SCALs the specified alpha.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="vectorx">The vectorx.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SWAP(System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            SWAPs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SWAP(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            SWAPs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SWAP(Cudafy.Types.ComplexF[],Cudafy.Types.ComplexF[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            SWAPs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SWAP(Cudafy.Types.ComplexD[],Cudafy.Types.ComplexD[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            SWAPs the specified vectorx.
            </summary>
            <param name="vectorx">The vectorx.</param>
            <param name="vectory">The vectory.</param>
            <param name="n">The n.</param>
            <param name="rowx">The rowx.</param>
            <param name="incx">The incx.</param>
            <param name="rowy">The rowy.</param>
            <param name="incy">The incy.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.GBMV(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single[],System.Single[],System.Single,System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the banded matrix-vector multiplication.
            y = alpha * op(A) * x + beta * y
            </summary>
            <param name="m">number of rows of matrix A.</param>
            <param name="n">number of columns of matrix A.</param>
            <param name="kl">number of subdiagonals of matrix A.</param>
            <param name="ku">number of superdiagonals of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimentions (kl + ku + 1) * n. This must be packed by column by column method.</param>
            <param name="x">vector with n elements if trans = N, m elements otherwise.</param>
            <param name="beta">scalar used for multiplication, if beta = 0 then y does not have to be a valid input.</param>
            <param name="y">vector with n elements if trans = N, m elements otherwise.</param>
            <param name="op">operation op(A) that is non- or(conj.) transpose.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. This typically be kl + ku + 1.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.GBMV(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double,System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the banded matrix-vector multiplication.
            y = alpha * op(A) * x + beta * y
            </summary>
            <param name="m">number of rows of matrix A.</param>
            <param name="n">number of columns of matrix A.</param>
            <param name="kl">number of subdiagonals of matrix A.</param>
            <param name="ku">number of superdiagonals of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimentions (kl + ku + 1) * n. This must be packed by column by column method.</param>
            <param name="x">vector with n elements if trans = N, m elements otherwise.</param>
            <param name="beta">scalar used for multiplication, if beta = 0 then y does not have to be a valid input.</param>
            <param name="y">vector with n elements if trans = N, m elements otherwise.</param>
            <param name="op">operation op(A) that is non- or(conj.) transpose.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be kl + ku + 1.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.GEMV(System.Int32,System.Int32,System.Single,System.Single[],System.Single[],System.Single,System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the matrix-vector multiplication.
            y = alpha * op(A) * x + beta * y
            </summary>
            <param name="m">number of rows of matrix A.</param>
            <param name="n">number of columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">Array of dimension m * n.</param>
            <param name="x">vector with n elements if trans = N, m elements otherwise.</param>
            <param name="beta">scalar used for multiplication, if beta = 0 then y does not have to be a valid input.</param>
            <param name="y">vector with n elements if trans = N, m elements otherwise.</param>
            <param name="op">operation op(A) that is non- or(conj.) transpose.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically tuned.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.GEMV(System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double,System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the matrix-vector multiplication.
            y = alpha * op(A) * x + beta * y
            </summary>
            <param name="m">number of rows of matrix A.</param>
            <param name="n">number of columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">Array of dimension m * n.</param>
            <param name="x">vector with n elements if trans = N, m elements otherwise.</param>
            <param name="beta">scalar used for multiplication, if beta = 0 then y does not have to be a valid input.</param>
            <param name="y">vector with n elements if trans = N, m elements otherwise.</param>
            <param name="op">operation op(A) that is non- or(conj.) transpose.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically tuned.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.GER(System.Int32,System.Int32,System.Single,System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the rank-1 update.
            A = alpha * x * transpose(y) + A
            </summary>
            <param name="m">number of rows of matrix A.</param>
            <param name="n">number of columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with m elements.</param>
            <param name="y">vector with n elements.</param>
            <param name="A">array of dimension m * n.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically tuned.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.GER(System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the rank-1 update.
            A = alpha * x * transpose(y) + A
            </summary>
            <param name="m">number of rows of matrix A.</param>
            <param name="n">number of columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with m elements.</param>
            <param name="y">vector with n elements.</param>
            <param name="A">array of dimension m * n.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically tuned.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SBMV(System.Int32,System.Int32,System.Single,System.Single[],System.Single[],System.Single,System.Single[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric banded matrix-vector multiplication.
            y = alpha * A * x + beta * y
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="k">number of subdiagonals and superdiagonals of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimentions (k + 1) * n. This must be packed by column by column method.</param>
            <param name="x">vector with n elements.</param>
            <param name="beta">scalar used for multiplication, if beta = 0 then y does not have to be a valid input.</param>
            <param name="y">vector with n elements.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be k + 1.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SBMV(System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double,System.Double[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric banded matrix-vector multiplication.
            y = alpha * A * x + beta * y
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="k">number of subdiagonals and superdiagonals of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimentions (k + 1) * n. This must be packed by column by column method.</param>
            <param name="x">vector with n elements.</param>
            <param name="beta">scalar used for multiplication, if beta = 0 then y does not have to be a valid input.</param>
            <param name="y">vector with n elements.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be k + 1.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SPMV(System.Int32,System.Single,System.Single[],System.Single[],System.Single,System.Single[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric packed matrix-vector multiplication.
            y = alpha * A * x + beta + y
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="Ap">array with A stored in packed format.</param>
            <param name="x">vector with n elements.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="y">vector with n elements.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SPMV(System.Int32,System.Double,System.Double[],System.Double[],System.Double,System.Double[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric packed matrix-vector multiplication.
            y = alpha * A * x + beta + y
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="Ap">array with A stored in packed format.</param>
            <param name="x">vector with n elements.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="y">vector with n elements.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SPR(System.Int32,System.Single,System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32)">
            <summary>
            Performs the packed symmetric rank-1 update.
            A = alpha * x * transpose(x) + A
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with n elements.</param>
            <param name="ap">array with A stored in packed format.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SPR(System.Int32,System.Double,System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32)">
            <summary>
            Performs the packed symmetric rank-1 update.
            A = alpha * x * transpose(x) + A
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with n elements.</param>
            <param name="ap">array with A stored in packed format.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SPR2(System.Int32,System.Single,System.Single[],System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32)">
            <summary>
            Performs the packed symmetric rank-2 update.
            A = alpha * (x * transpose(y) + y * transpose(x)) + A
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with n elements.</param>
            <param name="y">vector with n elements.</param>
            <param name="ap">array with A stored in packed format.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SPR2(System.Int32,System.Double,System.Double[],System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32)">
            <summary>
            Performs the packed symmetric rank-2 update.
            A = alpha * (x * transpose(y) + y * transpose(x)) + A
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with n elements.</param>
            <param name="y">vector with n elements.</param>
            <param name="ap">array with A stored in packed format.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYMV(System.Int32,System.Single,System.Single[],System.Single[],System.Single,System.Single[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric matrix-vector multiplication.
            y = alpha * A * x + beta * y
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension lda + n with lda >= max(1, n).</param>
            <param name="x">vector with n elements.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="y">vector with n elements.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYMV(System.Int32,System.Double,System.Double[],System.Double[],System.Double,System.Double[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric matrix-vector multiplication.
            y = alpha * A * x + beta * y
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension lda + n with lda >= max(1, n).</param>
            <param name="x">vector with n elements.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="y">vector with n elements.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYR(System.Int32,System.Single,System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric rank-1 update.
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with n elements.</param>
            <param name="A">array of dimension lda + n with lda >= max(1, n).</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYR(System.Int32,System.Double,System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric rank-1 update.
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with n elements.</param>
            <param name="A">array of dimension lda + n with lda >= max(1, n).</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYR2(System.Int32,System.Single,System.Single[],System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric rank-2 update.
            A = alpha * (x * transpose(y) + y * transpose(x)) + A
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with n elements.</param>
            <param name="y">vector with n elements.</param>
            <param name="A">array of dimension lda + n with lda >= max(1, n).</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYR2(System.Int32,System.Double,System.Double[],System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric rank-2 update.
            A = alpha * (x * transpose(y) + y * transpose(x)) + A
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="x">vector with n elements.</param>
            <param name="y">vector with n elements.</param>
            <param name="A">array of dimension lda + n with lda >= max(1, n).</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other symmetric part is not referenced and is inferred frorm the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="incx">stride between consecutive elements of x.</param>
            <param name="incy">stride between consecutive elements of y.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TBMV(System.Int32,System.Int32,System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Performs the triangular banded matrix-vector multiplication.
            x = op(A) * x
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="k">number of subdiagonals and superdiagonals of matrix A.</param>
            <param name="A">array of dimension lda * n with lda >= k+1</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be k + 1.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TBMV(System.Int32,System.Int32,System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Performs the triangular banded matrix-vector multiplication.
            x = op(A) * x
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="k">number of subdiagonals and superdiagonals of matrix A.</param>
            <param name="A">array of dimension lda * n with lda >= k+1</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be k + 1.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TBSV(System.Int32,System.Int32,System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Solves the triangular banded linear system with a single right-hand-side.
            x = op(A)^(-1) * x
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="k">number of subdiagonals and superdiagonals of matrix A.</param>
            <param name="A">array of dimension lda * n with lda >= k+1</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be k + 1.</param>
            <param name="icx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TBSV(System.Int32,System.Int32,System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Solves the triangular banded linear system with a single right-hand-side.
            x = op(A)^(-1) * x
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="k">number of subdiagonals and superdiagonals of matrix A.</param>
            <param name="A">array of dimension lda * n with lda >= k+1</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be k + 1.</param>
            <param name="icx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TPMV(System.Int32,System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32)">
            <summary>
            Performs the triangular packed matrix-vector multiplication.
            x = op(A) * x
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="AP">array with A stored in packed format.</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TPMV(System.Int32,System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32)">
            <summary>
            Performs the triangular packed matrix-vector multiplication.
            x = op(A) * x
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="AP">array with A stored in packed format.</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TPSV(System.Int32,System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32)">
            <summary>
            Solves the packed triangular linear system with a single right-hand-side.
            x = op(A)^-1 * x 
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="AP">array with A stored in packed format.</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TPSV(System.Int32,System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32)">
            <summary>
            Solves the packed triangular linear system with a single right-hand-side.
            x = op(A)^-1 * x 
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="AP">array with A stored in packed format.</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TRMV(System.Int32,System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Performs the triangular matrix-vector multiplication.
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="a">array of dimensions lda * n with lda >= max(1, n).</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be n.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TRMV(System.Int32,System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Performs the triangular matrix-vector multiplication.
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="a">array of dimensions lda * n with lda >= max(1, n).</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be n.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TRSV(System.Int32,System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Solves the triangular linear system with a single right-hand-side.
            x = op(A)^-1 * x
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="A">array of dimensions lda * n with lda >= max(1, n).</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be n.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TRSV(System.Int32,System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Solves the triangular linear system with a single right-hand-side.
            x = op(A)^-1 * x
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="A">array of dimensions lda * n with lda >= max(1, n).</param>
            <param name="x">vector with n elements.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not referenced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A. if lda = 0, lda is automatically be n.</param>
            <param name="incx">stride between consecutive elements of x.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.GEMM(System.Int32,System.Int32,System.Int32,System.Single,System.Single[],System.Single[],System.Single,System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasOperation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the matrix-matrix multiplication.
            C = alpha * op(A) * op(B) + beta * C
            </summary>
            <param name="m">number of rows of matrix op(A) and C.</param>
            <param name="k">number of columns of matix op(A) and rows of op(B).</param>
            <param name="n">number of columns of matix op(B) and C.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">arrasy of dimensions m * k.</param>
            <param name="B">array of dimension k * n.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="C">array of dimension m * n.</param>
            <param name="transa">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="transb">operation op(B) that is non- or (conj.) transpose.</param>
            <param name="lda">leading dimension of two-dimensional array used to store the matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store the matrix B.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store the matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.GEMM(System.Int32,System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double,System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasOperation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the matrix-matrix multiplication.
            C = alpha * op(A) * op(B) + beta * C
            </summary>
            <param name="m">number of rows of matrix op(A) and C.</param>
            <param name="k">number of columns of matix op(A) and rows of op(B).</param>
            <param name="n">number of columns of matix op(B) and C.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">arrasy of dimensions m * k.</param>
            <param name="B">array of dimension k * n.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="C">array of dimension m * n.</param>
            <param name="transa">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="transb">operation op(B) that is non- or (conj.) transpose.</param>
            <param name="lda">leading dimension of two-dimensional array used to store the matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store the matrix B.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store the matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYMM(System.Int32,System.Int32,System.Single,System.Single[],System.Single[],System.Single,System.Single[],Cudafy.Maths.BLAS.Types.cublasSideMode,Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs symmetric matrix-matrix multiplication.
            C = alpha * A * B + beta * C (side left),
            C = alpha * B * A + beta * C (side right)
            </summary>
            <param name="m">number of rows of matrix C and B, with matrix A sized accordingly.</param>
            <param name="n">number of columns of matrix C and B, with matrix A sized accordingly.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension m * m with side left, and n * n otherwise.</param>
            <param name="B">array of dimension m * n.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="C">array of dimension m * n.</param>
            <param name="side">indicates if matrix A is on the left or right of B.</param>
            <param name="uplo">indicates if matrix A lower of upper part is stored, the other symmetric part is not referenced and is inferred from the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store matrix B.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYMM(System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double,System.Double[],Cudafy.Maths.BLAS.Types.cublasSideMode,Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs symmetric matrix-matrix multiplication.
            C = alpha * A * B + beta * C (side left),
            C = alpha * B * A + beta * C (side right)
            </summary>
            <param name="m">number of rows of matrix C and B, with matrix A sized accordingly.</param>
            <param name="n">number of columns of matrix C and B, with matrix A sized accordingly.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension m * m with side left, and n * n otherwise.</param>
            <param name="B">array of dimension m * n.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="C">array of dimension m * n.</param>
            <param name="side">indicates if matrix A is on the left or right of B.</param>
            <param name="uplo">indicates if matrix A lower of upper part is stored, the other symmetric part is not referenced and is inferred from the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store matrix B.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYRK(System.Int32,System.Int32,System.Single,System.Single[],System.Single,System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric rank-k update.
            C = alpha * op(A) * transpose(op(A)) + beta * C
            </summary>
            <param name="n">number of rows of matrix op(A) and C.</param>
            <param name="k">number of columns of matrix op(A).</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension n * k.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="C">array of dimension n * n.</param>
            <param name="trans">operation op(A) that is non- or transpose.</param>
            <param name="uplo">indicates if matrix A lower of upper part is stored, the other symmetric part is not referenced and is inferred from the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYRK(System.Int32,System.Int32,System.Double,System.Double[],System.Double,System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric rank-k update.
            C = alpha * op(A) * transpose(op(A)) + beta * C
            </summary>
            <param name="n">number of rows of matrix op(A) and C.</param>
            <param name="k">number of columns of matrix op(A).</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension n * k.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="C">array of dimension n * n.</param>
            <param name="trans">operation op(A) that is non- or transpose.</param>
            <param name="uplo">indicates if matrix C lower of upper part is stored, the other symmetric part is not referenced and is inferred from the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYR2K(System.Int32,System.Int32,System.Single,System.Single[],System.Single[],System.Single,System.Single[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric rank-2k update.
            C = alpha * (op(A) * transpose(op(B)) + op(B) * transpose(op(A))) + beta * C
            </summary>
            <param name="n">number of rows of matrix op(A), op(B) and C.</param>
            <param name="k">number of columns of matrix op(A) and op(B).</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension n * k.</param>
            <param name="B">array of dimension n * k.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="C">array of dimension n * n.</param>
            <param name="trans">operation op(A), op(B) that is non- or transpose.</param>
            <param name="uplo">indicates if matrix C lower of upper part is stored, the other symmetric part is not referenced and is inferred from the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store matrix B.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.SYR2K(System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double,System.Double[],Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the symmetric rank-2k update.
            C = alpha * (op(A) * transpose(op(B)) + op(B) * transpose(op(A))) + beta * C
            </summary>
            <param name="n">number of rows of matrix op(A), op(B) and C.</param>
            <param name="k">number of columns of matrix op(A) and op(B).</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension n * k.</param>
            <param name="B">array of dimension n * k.</param>
            <param name="beta">scalar used for multiplication.</param>
            <param name="C">array of dimension n * n.</param>
            <param name="trans">operation op(A), op(B) that is non- or transpose.</param>
            <param name="uplo">indicates if matrix C lower of upper part is stored, the other symmetric part is not referenced and is inferred from the stored elements.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store matrix B.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TRMM(System.Int32,System.Int32,System.Single,System.Single[],System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasSideMode,Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the triangular matrix-matrix multiplication.
            C = alpha * op(A) * B (side left),
            C = alpha * B * op(A) (side right)
            </summary>
            <param name="m">number of rows of matrix B, with matrix A sized accordingly.</param>
            <param name="n">number of columns of matrix B, with matrix A sized accordingly.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension m * m.</param>
            <param name="B">array of dimension m * n.</param>
            <param name="C">array of dimension m * n.</param>
            <param name="side">indicates if matrix A is on the left or right of B.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not refernced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store matrix B.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TRMM(System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasSideMode,Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the triangular matrix-matrix multiplication.
            C = alpha * op(A) * B (side left),
            C = alpha * B * op(A) (side right)
            </summary>
            <param name="m">number of rows of matrix B, with matrix A sized accordingly.</param>
            <param name="n">number of columns of matrix B, with matrix A sized accordingly.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension m * m.</param>
            <param name="B">array of dimension m * n.</param>
            <param name="C">array of dimension m * n.</param>
            <param name="side">indicates if matrix A is on the left or right of B.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not refernced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store matrix B.</param>
            <param name="ldc">leading dimension of two-dimensional array used to store matrix C.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TRSM(System.Int32,System.Int32,System.Single,System.Single[],System.Single[],Cudafy.Maths.BLAS.Types.cublasSideMode,Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Solves the triangular linear system with multiple right-hand-sides.
            B = alpha * (op(A))^-1 * B (left side),
            B = alpha * B * (op(A))^-1 (right side)
            </summary>
            <param name="m">number of rows of matrix B, with matrix A sized accordingly.</param>
            <param name="n">number of columns of matrix B, with matrix A sized accordingly.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension m * m (n * n right side).</param>
            <param name="B">array of dimension m * n.</param>
            <param name="side">indicates if matrix A is on the left or right of B.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not refernced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store matrix B.</param>
        </member>
        <member name="M:Cudafy.Maths.BLAS.GPGPUBLAS.TRSM(System.Int32,System.Int32,System.Double,System.Double[],System.Double[],Cudafy.Maths.BLAS.Types.cublasSideMode,Cudafy.Maths.BLAS.Types.cublasOperation,Cudafy.Maths.BLAS.Types.cublasFillMode,Cudafy.Maths.BLAS.Types.cublasDiagType,System.Int32,System.Int32)">
            <summary>
            Solves the triangular linear system with multiple right-hand-sides.
            B = alpha * (op(A))^-1 * B (left side),
            B = alpha * B * (op(A))^-1 (right side)
            </summary>
            <param name="m">number of rows of matrix B, with matrix A sized accordingly.</param>
            <param name="n">number of columns of matrix B, with matrix A sized accordingly.</param>
            <param name="alpha">scalar used for multiplication.</param>
            <param name="A">array of dimension m * m (n * n right side).</param>
            <param name="B">array of dimension m * n.</param>
            <param name="side">indicates if matrix A is on the left or right of B.</param>
            <param name="trans">operation op(A) that is non- or (conj.) transpose.</param>
            <param name="uplo">indicates if matrix A lower or upper part is stored, the other part is not refernced and is inferred from the stored elements.</param>
            <param name="diag">indicates if the elements on the main diagonal of matrix A are unity and should not be accessed.</param>
            <param name="lda">leading dimension of two-dimensional array used to store matrix A.</param>
            <param name="ldb">leading dimension of two-dimensional array used to store matrix B.</param>
        </member>
        <member name="P:Cudafy.Maths.BLAS.GPGPUBLAS.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cudafy.Maths.BLAS.HostBLAS">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.LA.ISolver">
            <summary>
            Common interface for linear system solver. (for future)
            </summary>
        </member>
        <member name="T:Cudafy.Maths.LA.Solver">
            <summary>
            Linear solver class. (Not implemented. Do not use yet.)
            </summary>
        </member>
        <member name="M:Cudafy.Maths.LA.Solver.CG(System.Int32,System.Int32,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Single[],System.Single[],System.Single[],System.Single,System.Int32)">
            <summary>
            Solves symmetric linear system with conjugate gradient solver.
            A * x = b
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowA">array of n+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="dx">vector of n elements.</param>
            <param name="db">vector of n elements.</param>
            <param name="dp">vector of n elements. (temporary vector)</param>
            <param name="dAx">vector of n elements. (temporary vector)</param>
            <param name="tolerence">iterate tolerence of conjugate gradient solver.</param>
            <param name="maxIterate">max iterate count of conjugate gradient solver.</param>
            <returns>if A has singulrarity or failure in max iterate count, returns false. return true otherwise.</returns>
        </member>
        <member name="M:Cudafy.Maths.LA.Solver.BiCGSTAB(System.Int32,System.Int32,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Int32)">
            <summary>
            Solve linear system with Biconjugate gradient stabilized method (BiCGSTAB).
            </summary>
            <param name="n">number of rows and columns of matrix A.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowA">array of n+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="x">vector of n elements. (updated after solving.)</param>
            <param name="b">vector of n elements.</param>
            <param name="ax">temporary memory for BiCGSTAB.</param>
            <param name="r0">temporary memory for BiCGSTAB.</param>
            <param name="r">temporary memory for BiCGSTAB.</param>
            <param name="v">temporary memory for BiCGSTAB.</param>
            <param name="p">temporary memory for BiCGSTAB.</param>
            <param name="s">temporary memory for BiCGSTAB.</param>
            <param name="t">temporary memory for BiCGSTAB.</param>
            <param name="threshold">iterate tolerence of BiCGSTAB solver.</param>
            <param name="maxIterate">max iterate count of BiCGSTAB solver.</param>
            <returns></returns>
        </member>
        <member name="T:Cudafy.Maths.RAND.GPGPURAND">
            <summary>
            RAND wrapper for Cuda GPUs.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Cudafy.Maths.RAND.GPGPURAND"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.Create(Cudafy.Host.GPGPU,System.Boolean)">
            <summary>
            Creates an instance based on the specified gpu with pseudo random generator.
            </summary>
            <param name="gpu">The gpu.</param>
            <param name="host">if set to <c>true</c> the uses generator on the host (if applicable).</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.Create(Cudafy.Host.GPGPU,Cudafy.Maths.RAND.curandRngType,System.Boolean)">
            <summary>
            Creates an instance based on the specified gpu.
            </summary>
            <param name="gpu">The gpu.</param>
            <param name="rng_type">The type of generator.</param>
            <param name="host">if set to <c>true</c> the uses generator on the host (if applicable).</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.SetPseudoRandomGeneratorSeed(System.UInt64)">
            <summary>
            Sets the pseudo random generator seed.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GenerateUniform(System.Single[],System.Int32)">
            <summary>
            Generates random data.
            </summary>
            <param name="array">The array.</param>
            <param name="n">Count</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GenerateUniform(System.Double[],System.Int32)">
            <summary>
            Generates random data.
            </summary>
            <param name="array">The array.</param>
            <param name="n">Count</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.Generate(System.UInt32[],System.Int32)">
            <summary>
            Generates random data.
            </summary>
            <param name="array">The array.</param>
            <param name="n">Count</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GenerateLogNormal(System.Single[],System.Single,System.Single,System.Int32)">
            <summary>
            Generates random data.
            </summary>
            <param name="array">The array.</param>
            <param name="mean">The mean.</param>
            <param name="stddev">The stddev.</param>
            <param name="n">Count</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GenerateLogNormal(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            Generates random data.
            </summary>
            <param name="array">The array.</param>
            <param name="mean">The mean.</param>
            <param name="stddev">The stddev.</param>
            <param name="n">Count</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.Generate(System.UInt64[],System.Int32)">
            <summary>
            Generates random data.
            </summary>
            <param name="array">The array.</param>
            <param name="n">Count</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GenerateNormal(System.Single[],System.Single,System.Single,System.Int32)">
            <summary>
            Generates random data.
            </summary>
            <param name="array">The array.</param>
            <param name="mean">The mean.</param>
            <param name="stddev">The stddev.</param>
            <param name="n">Count</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GenerateNormal(System.Double[],System.Single,System.Single,System.Int32)">
            <summary>
            Generates random data.
            </summary>
            <param name="array">The array.</param>
            <param name="mean">The mean.</param>
            <param name="stddev">The stddev.</param>
            <param name="n">Count</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GenerateSeeds">
            <summary>
            Generates seeds.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GetDirectionVectors32(Cudafy.Maths.RAND.curandDirectionVectorSet)">
            <summary>
            Gets the direction vectors for 32-bit.
            </summary>
            <param name="set">The set.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GetDirectionVectors64(Cudafy.Maths.RAND.curandDirectionVectorSet)">
            <summary>
            Gets the direction vectors for 64-bit.
            </summary>
            <param name="set">The set.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GetScrambleConstants32(System.Int32)">
            <summary>
            Gets the scramble constants for 32-bit.
            </summary>
            <param name="n">Count</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GetScrambleConstants64(System.Int32)">
            <summary>
            Gets the scramble constants for 64-bit.
            </summary>
            <param name="n">Count</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.GetVersion">
            <summary>
            Gets the version of library.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.SetGeneratorOffset(System.UInt64)">
            <summary>
            Sets the generator offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.SetGeneratorOrdering(Cudafy.Maths.RAND.curandOrdering)">
            <summary>
            Sets the generator ordering.
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.SetQuasiRandomGeneratorDimensions(System.UInt32)">
            <summary>
            Sets the quasi random generator dimensions.
            </summary>
            <param name="num_dimensions">The num_dimensions.</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.GPGPURAND.SetStream(System.Int32)">
            <summary>
            Sets the stream.
            </summary>
            <param name="streamId">The stream id.</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.CudaRAND.CopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Copies memory.
            </summary>
            <param name="Destination">The destination.</param>
            <param name="Source">The source.</param>
            <param name="Length">The length.</param>
        </member>
        <member name="T:Cudafy.Maths.CudafyMathException">
            <summary>
            Exceptions for host.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.CudafyMathException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cudafy.Maths.CudafyMathException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cudafy.Maths.CudafyMathException.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cudafy.Maths.CudafyMathException"/> class.
            </summary>
            <param name="inner">The inner.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cudafy.Maths.CudafyMathException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cudafy.Maths.CudafyMathException"/> class.
            </summary>
            <param name="errMsg">The err MSG.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Cudafy.Maths.CudafyMathException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cudafy.Maths.CudafyMathException"/> class.
            </summary>
            <param name="inner">The inner exception.</param>
            <param name="errMsg">The err message.</param>
            <param name="args">The parameters.</param>
        </member>
        <member name="T:Cudafy.Maths.FFT.fftwf_plan">
            <summary>
            Creates, stores, and destroys fftw plans
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftwf_plan._handle">
            <summary>
            Native handle.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf_plan.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf_plan.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Cudafy.Maths.FFT.fftwf_plan"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf_plan.dft_1d(Cudafy.Maths.FFT.eFFTType,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates plan..
            </summary>
            <param name="fftType">Type of fft.</param>
            <param name="n">The n.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="direction">The direction.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf_plan.dft_2d(Cudafy.Maths.FFT.eFFTType,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            DFT_2Ds the specified FFT type.
            </summary>
            <param name="fftType">Type of the FFT.</param>
            <param name="nx">The nx.</param>
            <param name="ny">The ny.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="direction">The direction.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf_plan.dft_3d(Cudafy.Maths.FFT.eFFTType,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            DFT_3Ds the specified FFT type.
            </summary>
            <param name="fftType">Type of the FFT.</param>
            <param name="nx">The nx.</param>
            <param name="ny">The ny.</param>
            <param name="nz">The nz.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="direction">The direction.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="P:Cudafy.Maths.FFT.fftwf_plan.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:Cudafy.Maths.FFT.fftwf_plan.Input">
            <summary>
            Gets or sets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:Cudafy.Maths.FFT.fftwf_plan.Output">
            <summary>
            Gets or sets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="T:Cudafy.Maths.FFT.fftw_plan">
            <summary>
            Creates, stores, and destroys fftw plans
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_plan._handle">
            <summary>
            Native handle.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw_plan.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw_plan.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Cudafy.Maths.FFT.fftwf_plan"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw_plan.dft_1d(Cudafy.Maths.FFT.eFFTType,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates plan..
            </summary>
            <param name="fftType">FFT type.</param>
            <param name="n">The n.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="direction">The direction.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw_plan.dft_2d(Cudafy.Maths.FFT.eFFTType,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            DFT_2Ds the specified FFT type.
            </summary>
            <param name="fftType">Type of the FFT.</param>
            <param name="nx">The nx.</param>
            <param name="ny">The ny.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="direction">The direction.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw_plan.dft_3d(Cudafy.Maths.FFT.eFFTType,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            DFT_3Ds the specified FFT type.
            </summary>
            <param name="fftType">Type of the FFT.</param>
            <param name="nx">The nx.</param>
            <param name="ny">The ny.</param>
            <param name="nz">The nz.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="direction">The direction.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="P:Cudafy.Maths.FFT.fftw_plan.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:Cudafy.Maths.FFT.fftw_plan.Input">
            <summary>
            Gets or sets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:Cudafy.Maths.FFT.fftw_plan.Output">
            <summary>
            Gets or sets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="T:Cudafy.Maths.FFT.CudaFFT">
            <summary>
            FFT wrapper for Cuda GPUs.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.FFT.GPGPUFFT">
            <summary>
            FFT wrapper.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cudafy.Maths.FFT.GPGPUFFT"/> class.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.GPGPUFFT._gpu">
            <summary>
            GPU instance on which the FFT instance was made.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.VerifyTypes(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32@,System.Int32@)">
            <summary>
            Verifies the types.
            </summary>
            <param name="fftType">Type of the FFT.</param>
            <param name="dataType">Type of the data.</param>
            <param name="inSize">Size of input elements.</param>
            <param name="outSize">Size of output elements.</param>
            <returns>The CUFFTType.</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.SetStream(Cudafy.Maths.FFT.FFTPlan,System.Int32)">
            <summary>
            Sets the stream.
            </summary>
            <param name="plan">The plan to set the stream for.</param>
            <param name="streamId">The stream id.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.Create(Cudafy.Host.GPGPU)">
            <summary>
            Creates a GPGPUFFT based on the supplied GPGPU instance (e.g. CudaFFT or EmulatedGPU).
            </summary>
            <param name="gpu">The gpu instance.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.Remove(Cudafy.Maths.FFT.FFTPlan)">
            <summary>
            Frees the specified plan.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.RemoveAll">
            <summary>
            Destroys all plans.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.Plan1D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32)">
            <summary>
            Creates a 1D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">The data type.</param>
            <param name="nx">The length in samples.</param>
            <param name="batch">The number of FFTs in batch.</param>
            <returns>Plan.</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.Plan1D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Plan1s the D.
            </summary>
            <param name="fftType">Type of the FFT.</param>
            <param name="dataType">Type of the data.</param>
            <param name="nx">The nx.</param>
            <param name="batchSize">Size of the batch.</param>
            <param name="istride">The istride.</param>
            <param name="idist">The idist.</param>
            <param name="ostride">The ostride.</param>
            <param name="odist">The odist.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.Plan2D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a 2D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">The data type.</param>
            <param name="nx">The x length in samples.</param>
            <param name="ny">The y length in samples.</param>
            <param name="batch">The number of FFTs in batch.</param>
            <returns>Plan.</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.Plan3D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a 3D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">The data type.</param>
            <param name="nx">The x length in samples.</param>
            <param name="ny">The y length in samples.</param>
            <param name="nz">The z length in samples.</param>
            <param name="batch">The number of FFTs in batch.</param>
            <returns>Plan.</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.Execute``2(Cudafy.Maths.FFT.FFTPlan,``0[],``1[],System.Boolean)">
            <summary>
            Executes the specified plan.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="plan">The plan.</param>
            <param name="input">The input data.</param>
            <param name="output">The output data.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.Execute``2(Cudafy.Maths.FFT.FFTPlan,``0[0:,0:],``1[0:,0:],System.Boolean)">
            <summary>
            Executes the specified plan.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="plan">The plan.</param>
            <param name="input">The input data.</param>
            <param name="output">The output data.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.Execute``2(Cudafy.Maths.FFT.FFTPlan,``0[0:,0:,0:],``1[0:,0:,0:],System.Boolean)">
            <summary>
            Executes the specified plan.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="plan">The plan.</param>
            <param name="input">The input data.</param>
            <param name="output">The output data.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.GetVersion">
            <summary>
            Gets the version of library wrapped by this library.
            </summary>
            <returns>Version of library or -1 if not supported or available.</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.GPGPUFFT.SetCompatibilityMode(Cudafy.Maths.FFT.FFTPlan,Cudafy.Maths.FFT.eCompatibilityMode)">
            <summary>
            Configures the layout of CUFFT output in FFTW‐compatible modes.
            When FFTW compatibility is desired, it can be configured for padding
            only, for asymmetric complex inputs only, or to be fully compatible.
            </summary>
            <param name="plan">The plan.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.SetStream(Cudafy.Maths.FFT.FFTPlan,System.Int32)">
            <summary>
            Sets the stream.
            </summary>
            <param name="plan">The plan to set the stream for.</param>
            <param name="streamId">The stream id.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.Plan1D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32)">
            <summary>
            Creates a 1D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">Data type.</param>
            <param name="nx">The length in samples.</param>
            <param name="batchSize">The number of FFTs in batch.</param>
            <returns>Plan.</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.Plan2D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a 2D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">Data type.</param>
            <param name="nx">The number of samples in x dimension.</param>
            <param name="ny">The number of samples in y dimension.</param>
            <param name="batchSize">Size of batch.</param>
            <returns>Plan.</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.Plan3D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a 3D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">Data type.</param>
            <param name="nx">The number of samples in x dimension.</param>
            <param name="ny">The number of samples in y dimension.</param>
            <param name="nz">The number of samples in z dimension.</param>
            <param name="batchSize">Size of batch.</param>
            <returns>Plan.</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.Execute``2(Cudafy.Maths.FFT.FFTPlan,``0[],``1[],System.Boolean)">
            <summary>
            Executes the specified plan.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="plan">The plan.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.Execute``2(Cudafy.Maths.FFT.FFTPlan,``0[0:,0:],``1[0:,0:],System.Boolean)">
            <summary>
            Executes the specified plan.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="plan">The plan.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.Execute``2(Cudafy.Maths.FFT.FFTPlan,``0[0:,0:,0:],``1[0:,0:,0:],System.Boolean)">
            <summary>
            Executes the specified plan.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="plan">The plan.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.Remove(Cudafy.Maths.FFT.FFTPlan)">
            <summary>
            Frees the specified plan.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.GetVersion">
            <summary>
            Gets the version of CUFFT (CUDA 5.0 only)
            </summary>
            <returns>Version of library or -1 if not supported or available.</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.CudaFFT.SetCompatibilityMode(Cudafy.Maths.FFT.FFTPlan,Cudafy.Maths.FFT.eCompatibilityMode)">
            <summary>
            Configures the layout of CUFFT output in FFTW‐compatible modes.
            When FFTW compatibility is desired, it can be configured for padding
            only, for asymmetric complex inputs only, or to be fully compatible.
            </summary>
            <param name="plan">The plan.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:Cudafy.Maths.FFT.HostFFT">
            <summary>
            Implements emulation of GPU FFT library.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.HostFFT.Plan1D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32)">
            <summary>
            Creates a 1D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">The data type.</param>
            <param name="nx">The length in samples.</param>
            <param name="batch">The number of FFTs in batch.</param>
            <returns>
            Plan.
            </returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.HostFFT.Plan2D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a 2D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">The data type.</param>
            <param name="nx">The x length in samples.</param>
            <param name="ny">The y length in samples.</param>
            <param name="batch">The number of FFTs in batch.</param>
            <returns>
            Plan.
            </returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.HostFFT.Plan3D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a 3D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">The data type.</param>
            <param name="nx">The x length in samples.</param>
            <param name="ny">The y length in samples.</param>
            <param name="nz">The z length in samples.</param>
            <param name="batch">The number of FFTs in batch.</param>
            <returns>
            Plan.
            </returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.HostFFT.Execute``2(Cudafy.Maths.FFT.FFTPlan,``0[],``1[],System.Boolean)">
            <summary>
            Executes the specified plan.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="plan">The plan.</param>
            <param name="input">The input data.</param>
            <param name="output">The output data.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.HostFFT.Execute``2(Cudafy.Maths.FFT.FFTPlan,``0[0:,0:],``1[0:,0:],System.Boolean)">
            <summary>
            Executes the specified plan.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="plan">The plan.</param>
            <param name="input">The input data.</param>
            <param name="output">The output data.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.HostFFT.Execute``2(Cudafy.Maths.FFT.FFTPlan,``0[0:,0:,0:],``1[0:,0:,0:],System.Boolean)">
            <summary>
            Executes the specified plan.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="plan">The plan.</param>
            <param name="input">The input data.</param>
            <param name="output">The output data.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.HostFFT.Remove(Cudafy.Maths.FFT.FFTPlan)">
            <summary>
            Frees the specified plan.
            </summary>
            <param name="plan">The plan.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.HostFFT.Plan1D(Cudafy.Maths.FFT.eFFTType,Cudafy.Maths.FFT.eDataType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a 1D plan.
            </summary>
            <param name="fftType">Type of FFT.</param>
            <param name="dataType">The data type.</param>
            <param name="nx">The length in samples.</param>
            <param name="batch">The number of FFTs in batch.</param>
            <param name="istride">The istride.</param>
            <param name="idist">The idist.</param>
            <param name="ostride">The ostride.</param>
            <param name="odist">The odist.</param>
            <returns>Plan.</returns>
        </member>
        <member name="T:Cudafy.Maths.FFT.FFTPlan">
            <summary>
            Abstract base class for FFT plans.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.FFTPlan.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Cudafy.Maths.FFT.FFTPlan"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.FFTPlan.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.FFTPlan.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Cudafy.Maths.FFT.FFTPlan.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cudafy.Maths.FFT.FFTPlan.BatchSize">
            <summary>
            Gets or sets the size of the batch.
            </summary>
            <value>The size of the batch.</value>
        </member>
        <member name="P:Cudafy.Maths.FFT.FFTPlan.Length">
            <summary>
            Gets the length when overridden.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Cudafy.Maths.FFT.FFTPlan1D">
            <summary>
            Represents a 1D FFT plan.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.FFTPlan1D.Execute``2(``0[],``1[],System.Boolean)">
            <summary>
            Executes the FFT.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.FFTPlan1D.SetCompatibilityMode(Cudafy.Maths.FFT.eCompatibilityMode)">
            <summary>
            Configures the layout of CUFFT output in FFTW‐compatible modes.
            When FFTW compatibility is desired, it can be configured for padding
            only, for asymmetric complex inputs only, or to be fully compatible.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="P:Cudafy.Maths.FFT.FFTPlan1D.XSize">
            <summary>
            Gets or sets the size of the X dimension.
            </summary>
            <value>The size of the X dimension.</value>
        </member>
        <member name="P:Cudafy.Maths.FFT.FFTPlan1D.Length">
            <summary>
            Gets the length (XSize).
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Cudafy.Maths.FFT.FFTPlan2D">
            <summary>
            Represents a 2D FFT plan.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.FFTPlan2D.Execute``2(``0[0:,0:],``1[0:,0:],System.Boolean)">
            <summary>
            Executes the FFT.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inverse">if set to <c>true</c> inverse.</param>
        </member>
        <member name="P:Cudafy.Maths.FFT.FFTPlan2D.YSize">
            <summary>
            Gets or sets the size of the Y dimension.
            </summary>
            <value>The size of the Y dimension.</value>
        </member>
        <member name="P:Cudafy.Maths.FFT.FFTPlan2D.Length">
            <summary>
            Gets the length (XSize * YSize).
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Cudafy.Maths.FFT.FFTPlan3D">
            <summary>
            Represents a 3D FFT plan.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.FFTPlan3D.Execute``2(``0[0:,0:,0:],``1[0:,0:,0:],System.Boolean)">
            <summary>
            Executes the specified input.
            </summary>
            <typeparam name="T">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <typeparam name="U">Data format: Double, Single, ComplexD or ComplexF.</typeparam>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="inverse">if set to <c>true</c> [inverse].</param>
        </member>
        <member name="P:Cudafy.Maths.FFT.FFTPlan3D.ZSize">
            <summary>
            Gets or sets the size of the Z dimension.
            </summary>
            <value>The size of the Z dimension.</value>
        </member>
        <member name="P:Cudafy.Maths.FFT.FFTPlan3D.Length">
            <summary>
            Gets the length (XSize * YSize * ZSize).
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Cudafy.Maths.FFT.eFFTType">
            <summary>
            FFT Type enumeration.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.eFFTType.Real2Complex">
            <summary>
            Real to complex.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.eFFTType.Complex2Real">
            <summary>
            Complex to real.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.eFFTType.Complex2Complex">
            <summary>
            Complex to complex.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.FFT.eDataType">
            <summary>
            Data type enumeration.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.eDataType.Double">
            <summary>
            Double floating point.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.eDataType.Single">
            <summary>
            Single floating point.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.FFT.eCompatibilityMode">
            <summary>
            FFTW compatibility mode.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.eCompatibilityMode.Native">
            <summary>
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.eCompatibilityMode.FFTW_Padding">
            <summary>
                 Inserts extra padding between packed in-place transforms for
                 batched transforms with power-of-2 size. (default)
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.eCompatibilityMode.FFTW_Asymmetric">
            <summary>
                 Guarantees FFTW-compatible output for non-symmetric complex inputs
                 for transforms with power-of-2 size. This is only useful for
                 artificial (i.e. random) datasets as actual data will always be
                 symmetric if it has come from the real plane. If you don't
                 understand what this means, you probably don't have to use it.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.eCompatibilityMode.FFTW_All">
            <summary>
                For convenience, enables all FFTW compatibility modes at once.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.FFT.fftw_flags">
            <summary>
            FFTW planner flags
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_flags.Measure">
            <summary>
            Tells FFTW to find an optimized plan by actually computing several FFTs and measuring their execution time. 
            Depending on your machine, this can take some time (often a few seconds). Default (0x0). 
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_flags.DestroyInput">
            <summary>
            Specifies that an out-of-place transform is allowed to overwrite its 
            input array with arbitrary data; this can sometimes allow more efficient algorithms to be employed.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_flags.Unaligned">
            <summary>
            Rarely used. Specifies that the algorithm may not impose any unusual alignment requirements on the input/output 
            arrays (i.e. no SIMD). This flag is normally not necessary, since the planner automatically detects 
            misaligned arrays. The only use for this flag is if you want to use the guru interface to execute a given 
            plan on a different array that may not be aligned like the original. 
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_flags.ConserveMemory">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_flags.Exhaustive">
            <summary>
            Like Patient, but considers an even wider range of algorithms, including many that we think are 
            unlikely to be fast, to produce the most optimal plan but with a substantially increased planning time. 
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_flags.PreserveInput">
            <summary>
            Specifies that an out-of-place transform must not change its input array. 
            </summary>
            <remarks>
            This is ordinarily the default, 
            except for c2r and hc2r (i.e. complex-to-real) transforms for which DestroyInput is the default. 
            In the latter cases, passing PreserveInput will attempt to use algorithms that do not destroy the 
            input, at the expense of worse performance; for multi-dimensional c2r transforms, however, no 
            input-preserving algorithms are implemented and the planner will return null if one is requested.
            </remarks>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_flags.Patient">
            <summary>
            Like Measure, but considers a wider range of algorithms and often produces a “more optimal” plan 
            (especially for large transforms), but at the expense of several times longer planning time 
            (especially for large transforms).
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_flags.Estimate">
            <summary>
            Specifies that, instead of actual measurements of different algorithms, a simple heuristic is 
            used to pick a (probably sub-optimal) plan quickly. With this flag, the input/output arrays 
            are not overwritten during planning. 
            </summary>
        </member>
        <member name="T:Cudafy.Maths.FFT.fftw_direction">
            <summary>
            Defines direction of operation
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_direction.Forward">
            <summary>
            Computes a regular DFT
            </summary>
        </member>
        <member name="F:Cudafy.Maths.FFT.fftw_direction.Backward">
            <summary>
            Computes the inverse DFT
            </summary>
        </member>
        <member name="T:Cudafy.Maths.FFT.fftw_kind">
            <summary>
            Kinds of real-to-real transforms
            </summary>
        </member>
        <member name="T:Cudafy.Maths.FFT.fftw">
            <summary>
            Contains the Basic Interface FFTW functions for double-precision (double) operations
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.malloc(System.Int32)">
            <summary>
            Allocates FFTW-optimized unmanaged memory
            </summary>
            <param name="length">Amount to allocate, in bytes</param>
            <returns>Pointer to allocated memory</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.free(System.IntPtr)">
            <summary>
            Deallocates memory allocated by FFTW malloc
            </summary>
            <param name="mem">Pointer to memory to release</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.destroy_plan(System.IntPtr)">
            <summary>
            Deallocates an FFTW plan and all associated resources
            </summary>
            <param name="plan">Pointer to the plan to release</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.cleanup">
            <summary>
            Clears all memory used by FFTW, resets it to initial state. Does not replace destroy_plan and free
            </summary>
            <remarks>After calling fftw_cleanup, all existing plans become undefined, and you should not 
            attempt to execute them nor to destroy them. You can however create and execute/destroy new plans, 
            in which case FFTW starts accumulating wisdom information again. 
            fftw_cleanup does not deallocate your plans; you should still call fftw_destroy_plan for this purpose.</remarks>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.set_timelimit(System.Double)">
            <summary>
            Sets the maximum time that can be used by the planner.
            </summary>
            <param name="seconds">Maximum time, in seconds.</param>
            <remarks>This function instructs FFTW to spend at most seconds seconds (approximately) in the planner. 
            If seconds == -1.0 (the default value), then planning time is unbounded. 
            Otherwise, FFTW plans with a progressively wider range of algorithms until the the given time limit is 
            reached or the given range of algorithms is explored, returning the best available plan. For example, 
            specifying fftw_flags.Patient first plans in Estimate mode, then in Measure mode, then finally (time 
            permitting) in Patient. If fftw_flags.Exhaustive is specified instead, the planner will further progress to 
            Exhaustive mode. 
            </remarks>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.execute(System.IntPtr)">
            <summary>
            Executes an FFTW plan, provided that the input and output arrays still exist
            </summary>
            <param name="plan">Pointer to the plan to execute</param>
            <remarks>execute (and equivalents) is the only function in FFTW guaranteed to be thread-safe.</remarks>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.many_dft(System.Int32,System.Int32[],System.Int32,System.IntPtr,System.Int32[],System.Int32,System.Int32,System.IntPtr,System.Int32[],System.Int32,System.Int32,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Many_dfts the specified rank.
            </summary>
            <param name="rank">The rank.</param>
            <param name="n">The n.</param>
            <param name="howmany">The howmany.</param>
            <param name="input">The input.</param>
            <param name="inembed">The inembed.</param>
            <param name="istride">The istride.</param>
            <param name="idist">The idist.</param>
            <param name="output">The output.</param>
            <param name="onembed">The onembed.</param>
            <param name="ostride">The ostride.</param>
            <param name="odist">The odist.</param>
            <param name="sign">The sign.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.many_dft_r2c(System.Int32,System.Int32[],System.Int32,System.IntPtr,System.Int32[],System.Int32,System.Int32,System.IntPtr,System.Int32[],System.Int32,System.Int32,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Many_dft_r2cs the specified rank.
            </summary>
            <param name="rank">The rank.</param>
            <param name="n">The n.</param>
            <param name="howmany">The howmany.</param>
            <param name="input">The input.</param>
            <param name="inembed">The inembed.</param>
            <param name="istride">The istride.</param>
            <param name="idist">The idist.</param>
            <param name="output">The output.</param>
            <param name="onembed">The onembed.</param>
            <param name="ostride">The ostride.</param>
            <param name="odist">The odist.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.many_dft_c2r(System.Int32,System.Int32[],System.Int32,System.IntPtr,System.Int32[],System.Int32,System.Int32,System.IntPtr,System.Int32[],System.Int32,System.Int32,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Many_dft_c2rs the specified rank.
            </summary>
            <param name="rank">The rank.</param>
            <param name="n">The n.</param>
            <param name="howmany">The howmany.</param>
            <param name="input">The input.</param>
            <param name="inembed">The inembed.</param>
            <param name="istride">The istride.</param>
            <param name="idist">The idist.</param>
            <param name="output">The output.</param>
            <param name="onembed">The onembed.</param>
            <param name="ostride">The ostride.</param>
            <param name="odist">The odist.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_1d(System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 1-dimensional complex-to-complex DFT
            </summary>
            <param name="n">The logical size of the transform</param>
            <param name="direction">Specifies the direction of the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_2d(System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 2-dimensional complex-to-complex DFT
            </summary>
            <param name="nx">The logical size of the transform along the first dimension</param>
            <param name="ny">The logical size of the transform along the second dimension</param>
            <param name="direction">Specifies the direction of the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_3d(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 3-dimensional complex-to-complex DFT
            </summary>
            <param name="nx">The logical size of the transform along the first dimension</param>
            <param name="ny">The logical size of the transform along the second dimension</param>
            <param name="nz">The logical size of the transform along the third dimension</param>
            <param name="direction">Specifies the direction of the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for an n-dimensional complex-to-complex DFT
            </summary>
            <param name="rank">Number of dimensions</param>
            <param name="n">Array containing the logical size along each dimension</param>
            <param name="direction">Specifies the direction of the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_r2c_1d(System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 1-dimensional real-to-complex DFT
            </summary>
            <param name="n">Number of REAL (input) elements in the transform</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_r2c_2d(System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 2-dimensional real-to-complex DFT
            </summary>
            <param name="nx">Number of REAL (input) elements in the transform along the first dimension</param>
            <param name="ny">Number of REAL (input) elements in the transform along the second dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_r2c_3d(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 3-dimensional real-to-complex DFT
            </summary>
            <param name="nx">Number of REAL (input) elements in the transform along the first dimension</param>
            <param name="ny">Number of REAL (input) elements in the transform along the second dimension</param>
            <param name="nz">Number of REAL (input) elements in the transform along the third dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_r2c(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for an n-dimensional real-to-complex DFT
            </summary>
            <param name="rank">Number of dimensions</param>
            <param name="n">Array containing the number of REAL (input) elements along each dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_c2r_1d(System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 1-dimensional complex-to-real DFT
            </summary>
            <param name="n">Number of REAL (output) elements in the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_c2r_2d(System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 2-dimensional complex-to-real DFT
            </summary>
            <param name="nx">Number of REAL (output) elements in the transform along the first dimension</param>
            <param name="ny">Number of REAL (output) elements in the transform along the second dimension</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_c2r_3d(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 3-dimensional complex-to-real DFT
            </summary>
            <param name="nx">Number of REAL (output) elements in the transform along the first dimension</param>
            <param name="ny">Number of REAL (output) elements in the transform along the second dimension</param>
            <param name="nz">Number of REAL (output) elements in the transform along the third dimension</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.dft_c2r(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for an n-dimensional complex-to-real DFT
            </summary>
            <param name="rank">Number of dimensions</param>
            <param name="n">Array containing the number of REAL (output) elements along each dimension</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.r2r_1d(System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 1-dimensional real-to-real DFT
            </summary>
            <param name="n">Number of elements in the transform</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="kind">The kind of real-to-real transform to compute</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.r2r_2d(System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 2-dimensional real-to-real DFT
            </summary>
            <param name="nx">Number of elements in the transform along the first dimension</param>
            <param name="ny">Number of elements in the transform along the second dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="kindx">The kind of real-to-real transform to compute along the first dimension</param>
            <param name="kindy">The kind of real-to-real transform to compute along the second dimension</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.r2r_3d(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 3-dimensional real-to-real DFT
            </summary>
            <param name="nx">Number of elements in the transform along the first dimension</param>
            <param name="ny">Number of elements in the transform along the second dimension</param>
            <param name="nz">Number of elements in the transform along the third dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="kindx">The kind of real-to-real transform to compute along the first dimension</param>
            <param name="kindy">The kind of real-to-real transform to compute along the second dimension</param>
            <param name="kindz">The kind of real-to-real transform to compute along the third dimension</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.r2r(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_kind[],Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for an n-dimensional real-to-real DFT
            </summary>
            <param name="rank">Number of dimensions</param>
            <param name="n">Array containing the number of elements in the transform along each dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="kind">An array containing the kind of real-to-real transform to compute along each dimension</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.flops(System.IntPtr,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns (approximately) the number of flops used by a certain plan
            </summary>
            <param name="plan">The plan to measure</param>
            <param name="add">Reference to double to hold number of adds</param>
            <param name="mul">Reference to double to hold number of muls</param>
            <param name="fma">Reference to double to hold number of fmas (fused multiply-add)</param>
            <remarks>Total flops ~= add+mul+2*fma or add+mul+fma if fma is supported</remarks>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftw.print_plan(System.IntPtr)">
            <summary>
            Outputs a "nerd-readable" version of the specified plan to stdout
            </summary>
            <param name="plan">The plan to output</param>
        </member>
        <member name="T:Cudafy.Maths.FFT.fftwf">
            <summary>
            Contains the Basic Interface FFTW functions for single-precision (float) operations
            </summary>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.malloc(System.Int32)">
            <summary>
            Allocates FFTW-optimized unmanaged memory
            </summary>
            <param name="length">Amount to allocate, in bytes</param>
            <returns>Pointer to allocated memory</returns>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.free(System.IntPtr)">
            <summary>
            Deallocates memory allocated by FFTW malloc
            </summary>
            <param name="mem">Pointer to memory to release</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.destroy_plan(System.IntPtr)">
            <summary>
            Deallocates an FFTW plan and all associated resources
            </summary>
            <param name="plan">Pointer to the plan to release</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.cleanup">
            <summary>
            Clears all memory used by FFTW, resets it to initial state. Does not replace destroy_plan and free
            </summary>
            <remarks>After calling fftw_cleanup, all existing plans become undefined, and you should not 
            attempt to execute them nor to destroy them. You can however create and execute/destroy new plans, 
            in which case FFTW starts accumulating wisdom information again. 
            fftw_cleanup does not deallocate your plans; you should still call fftw_destroy_plan for this purpose.</remarks>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.set_timelimit(System.Double)">
            <summary>
            Sets the maximum time that can be used by the planner.
            </summary>
            <param name="seconds">Maximum time, in seconds.</param>
            <remarks>This function instructs FFTW to spend at most seconds seconds (approximately) in the planner. 
            If seconds == -1.0 (the default value), then planning time is unbounded. 
            Otherwise, FFTW plans with a progressively wider range of algorithms until the the given time limit is 
            reached or the given range of algorithms is explored, returning the best available plan. For example, 
            specifying fftw_flags.Patient first plans in Estimate mode, then in Measure mode, then finally (time 
            permitting) in Patient. If fftw_flags.Exhaustive is specified instead, the planner will further progress to 
            Exhaustive mode. 
            </remarks>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.execute(System.IntPtr)">
            <summary>
            Executes an FFTW plan, provided that the input and output arrays still exist
            </summary>
            <param name="plan">Pointer to the plan to execute</param>
            <remarks>execute (and equivalents) is the only function in FFTW guaranteed to be thread-safe.</remarks>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_1d(System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 1-dimensional complex-to-complex DFT
            </summary>
            <param name="n">The logical size of the transform</param>
            <param name="direction">Specifies the direction of the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_2d(System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 2-dimensional complex-to-complex DFT
            </summary>
            <param name="nx">The logical size of the transform along the first dimension</param>
            <param name="ny">The logical size of the transform along the second dimension</param>
            <param name="direction">Specifies the direction of the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_3d(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 3-dimensional complex-to-complex DFT
            </summary>
            <param name="nx">The logical size of the transform along the first dimension</param>
            <param name="ny">The logical size of the transform along the second dimension</param>
            <param name="nz">The logical size of the transform along the third dimension</param>
            <param name="direction">Specifies the direction of the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_direction,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for an n-dimensional complex-to-complex DFT
            </summary>
            <param name="rank">Number of dimensions</param>
            <param name="n">Array containing the logical size along each dimension</param>
            <param name="direction">Specifies the direction of the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_r2c_1d(System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 1-dimensional real-to-complex DFT
            </summary>
            <param name="n">Number of REAL (input) elements in the transform</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_r2c_2d(System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 2-dimensional real-to-complex DFT
            </summary>
            <param name="nx">Number of REAL (input) elements in the transform along the first dimension</param>
            <param name="ny">Number of REAL (input) elements in the transform along the second dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_r2c_3d(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 3-dimensional real-to-complex DFT
            </summary>
            <param name="nx">Number of REAL (input) elements in the transform along the first dimension</param>
            <param name="ny">Number of REAL (input) elements in the transform along the second dimension</param>
            <param name="nz">Number of REAL (input) elements in the transform along the third dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_r2c(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for an n-dimensional real-to-complex DFT
            </summary>
            <param name="rank">Number of dimensions</param>
            <param name="n">Array containing the number of REAL (input) elements along each dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 8-byte complex numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_c2r_1d(System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 1-dimensional complex-to-real DFT
            </summary>
            <param name="n">Number of REAL (output) elements in the transform</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_c2r_2d(System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 2-dimensional complex-to-real DFT
            </summary>
            <param name="nx">Number of REAL (output) elements in the transform along the first dimension</param>
            <param name="ny">Number of REAL (output) elements in the transform along the second dimension</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_c2r_3d(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 3-dimensional complex-to-real DFT
            </summary>
            <param name="nx">Number of REAL (output) elements in the transform along the first dimension</param>
            <param name="ny">Number of REAL (output) elements in the transform along the second dimension</param>
            <param name="nz">Number of REAL (output) elements in the transform along the third dimension</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.dft_c2r(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for an n-dimensional complex-to-real DFT
            </summary>
            <param name="rank">Number of dimensions</param>
            <param name="n">Array containing the number of REAL (output) elements along each dimension</param>
            <param name="input">Pointer to an array of 8-byte complex numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.r2r_1d(System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 1-dimensional real-to-real DFT
            </summary>
            <param name="n">Number of elements in the transform</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="kind">The kind of real-to-real transform to compute</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.r2r_2d(System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 2-dimensional real-to-real DFT
            </summary>
            <param name="nx">Number of elements in the transform along the first dimension</param>
            <param name="ny">Number of elements in the transform along the second dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="kindx">The kind of real-to-real transform to compute along the first dimension</param>
            <param name="kindy">The kind of real-to-real transform to compute along the second dimension</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.r2r_3d(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_kind,Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for a 3-dimensional real-to-real DFT
            </summary>
            <param name="nx">Number of elements in the transform along the first dimension</param>
            <param name="ny">Number of elements in the transform along the second dimension</param>
            <param name="nz">Number of elements in the transform along the third dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="kindx">The kind of real-to-real transform to compute along the first dimension</param>
            <param name="kindy">The kind of real-to-real transform to compute along the second dimension</param>
            <param name="kindz">The kind of real-to-real transform to compute along the third dimension</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.r2r(System.Int32,System.Int32[],System.IntPtr,System.IntPtr,Cudafy.Maths.FFT.fftw_kind[],Cudafy.Maths.FFT.fftw_flags)">
            <summary>
            Creates a plan for an n-dimensional real-to-real DFT
            </summary>
            <param name="rank">Number of dimensions</param>
            <param name="n">Array containing the number of elements in the transform along each dimension</param>
            <param name="input">Pointer to an array of 4-byte real numbers</param>
            <param name="output">Pointer to an array of 4-byte real numbers</param>
            <param name="kind">An array containing the kind of real-to-real transform to compute along each dimension</param>
            <param name="flags">Flags that specify the behavior of the planner</param>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.flops(System.IntPtr,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns (approximately) the number of flops used by a certain plan
            </summary>
            <param name="plan">The plan to measure</param>
            <param name="add">Reference to double to hold number of adds</param>
            <param name="mul">Reference to double to hold number of muls</param>
            <param name="fma">Reference to double to hold number of fmas (fused multiply-add)</param>
            <remarks>Total flops ~= add+mul+2*fma or add+mul+fma if fma is supported</remarks>
        </member>
        <member name="M:Cudafy.Maths.FFT.fftwf.print_plan(System.IntPtr)">
            <summary>
            Outputs a "nerd-readable" version of the specified plan to stdout
            </summary>
            <param name="plan">The plan to output</param>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.GenerateUniform(Cudafy.Maths.RAND.RandGenerator,System.IntPtr,GASS.Types.SizeT)">
            <summary>
            GenerateUniform
            </summary>
            <param name="generator">Handle</param>
            <param name="outputPtr">Single array</param>
            <param name="n">Count</param>
            <returns>Status</returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.GenerateUniformDouble(Cudafy.Maths.RAND.RandGenerator,System.IntPtr,GASS.Types.SizeT)">
            <summary>
            GenerateUniform
            </summary>
            <param name="generator">Handle</param>
            <param name="outputPtr">Double array</param>
            <param name="n">Count</param>
            <returns>Status</returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.Generate(Cudafy.Maths.RAND.RandGenerator,System.IntPtr,GASS.Types.SizeT)">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="outputPtr">Int32 array</param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.GenerateLogNormal(Cudafy.Maths.RAND.RandGenerator,System.IntPtr,GASS.Types.SizeT,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="outputPtr">Float array</param>
            <param name="n"></param>
            <param name="mean"></param>
            <param name="stddev"></param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.GenerateLogNormalDouble(Cudafy.Maths.RAND.RandGenerator,System.IntPtr,GASS.Types.SizeT,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="outputPtr">Double array</param>
            <param name="n"></param>
            <param name="mean"></param>
            <param name="stddev"></param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.GenerateLongLong(Cudafy.Maths.RAND.RandGenerator,System.IntPtr,GASS.Types.SizeT)">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="outputPtr">UInt64 array</param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.GenerateNormal(Cudafy.Maths.RAND.RandGenerator,System.IntPtr,GASS.Types.SizeT,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="outputPtr">Single Array</param>
            <param name="n"></param>
            <param name="mean"></param>
            <param name="stddev"></param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.GenerateNormalDouble(Cudafy.Maths.RAND.RandGenerator,System.IntPtr,GASS.Types.SizeT,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="outputPtr">Double array</param>
            <param name="n"></param>
            <param name="mean"></param>
            <param name="stddev"></param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.GetScrambleConstants32(System.IntPtr@)">
            <summary>
            
            </summary>
            <param name="constants">UInt32 array</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.RAND.ICURANDDriver.GetScrambleConstants64(System.IntPtr@)">
            <summary>
            
            </summary>
            <param name="constants">UInt64 array</param>
            <returns></returns>
        </member>
        <member name="T:Cudafy.Maths.RAND.curandDirectionVectorSet">
            <summary>
            Rand Direction Vector Set
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandDirectionVectorSet.CURAND_DIRECTION_VECTORS_32_JOEKUO6">
            <summary>
            Specific set of 32-bit direction vectors generated from polynomials recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandDirectionVectorSet.CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6">
            <summary>
            Specific set of 32-bit direction vectors generated from polynomials recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions, and scrambled
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandDirectionVectorSet.CURAND_DIRECTION_VECTORS_64_JOEKUO6">
            <summary>
            Specific set of 64-bit direction vectors generated from polynomials recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandDirectionVectorSet.CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6">
            <summary>
            Specific set of 64-bit direction vectors generated from polynomials recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions, and scrambled
            </summary>
        </member>
        <member name="T:Cudafy.Maths.RAND.curandStatus">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Cudafy.Maths.RAND.curandRngType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandRngType.CURAND_RNG_TEST">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandRngType.CURAND_RNG_PSEUDO_DEFAULT">
            <summary>
            Default pseudorandom generator
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandRngType.CURAND_RNG_PSEUDO_XORWOW">
            <summary>
            XORWOW pseudorandom generator
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandRngType.CURAND_RNG_QUASI_DEFAULT">
            <summary>
            Default quasirandom generator
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandRngType.CURAND_RNG_QUASI_SOBOL32">
            <summary>
            Sobol32 quasirandom generator
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandRngType.CURAND_RNG_QUASI_SCRAMBLED_SOBOL32">
            <summary>
            Scrambled Sobol32 quasirandom generator
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandRngType.CURAND_RNG_QUASI_SOBOL64">
            <summary>
            Sobol64 quasirandom generator
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandRngType.CURAND_RNG_QUASI_SCRAMBLED_SOBOL64">
            <summary>
            Scrambled Sobol64 quasirandom generator
            </summary>
        </member>
        <member name="T:Cudafy.Maths.RAND.curandOrdering">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandOrdering.CURAND_ORDERING_PSEUDO_BEST">
            <summary>
            Best ordering for pseudorandom results
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandOrdering.CURAND_ORDERING_PSEUDO_DEFAULT">
            <summary>
            Specific default 4096 thread sequence for pseudorandom results
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandOrdering.CURAND_ORDERING_PSEUDO_SEEDED">
            <summary>
            Specific seeding pattern for fast lower quality pseudorandom results
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.curandOrdering.CURAND_ORDERING_QUASI_DEFAULT">
            <summary>
            Specific n-dimensional ordering for quasirandom results
            </summary>
        </member>
        <member name="T:Cudafy.Maths.RAND.RandDirectionVectors32">
            <summary>
            Array of 32 * 32-bit direction vectors.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.RandDirectionVectors32.direction_vectors">
            <summary>
            Fixed size array of 32 direction vectors.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.RAND.RandDirectionVectors64">
            <summary>
            Array of 64 * 64-bit direction vectors.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.RAND.RandDirectionVectors64.direction_vectors">
            <summary>
            Fixed size array of 64 direction vectors.
            </summary>        
        </member>
        <member name="T:Cudafy.Maths.RAND.RandGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.GPGPUSPARSE">
            <summary>
            Abstract base class for devices supporting SPARSE matrices.
            Warning: This code is alpha and incomplete.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Create(Cudafy.Host.GPGPU)">
            <summary>
            Creates a SPARSE wrapper based on the specified gpu. Note only CudaGPU is supported.
            </summary>
            <param name="gpu">The gpu.</param>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cudafy.Maths.SPARSE.GPGPUSPARSE"/> class.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Cudafy.Maths.SPARSE.GPGPUSPARSE"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.GetVersionInfo">
            <summary>
            Gets the version info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.NNZ(System.Int32,System.Int32,System.Single[],System.Int32[],Cudafy.Maths.SPARSE.cusparseDirection,System.Int32)">
            <summary>
            Computes the number of non-zero elements per row or column and the total number of non-zero elements.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="vector">array of size m or n containing the number of non-zero elements per row or column, respectively.</param>
            <param name="dirA">indicates whether to count the number of non-zero elements per row or per column, respectively.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
            <returns>total number of non-zero elements.</returns>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.NNZ(System.Int32,System.Int32,System.Single[],System.Int32[],Cudafy.Maths.SPARSE.cusparseMatDescr,Cudafy.Maths.SPARSE.cusparseDirection,System.Int32)">
            <summary>
            Computes the number of non-zero elements per row or column and the total number of non-zero elements.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="vector">array of size m or n containing the number of non-zero elements per row or column, respectively.</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="dirA">indicates whether to count the number of non-zero elements per row or per column, respectively.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
            <returns>total number of non-zero elements.</returns>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.NNZ(System.Int32,System.Int32,System.Double[],System.Int32[],Cudafy.Maths.SPARSE.cusparseDirection,System.Int32)">
            <summary>
            Computes the number of non-zero elements per row or column and the total number of non-zero elements.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="vector">array of size m or n containing the number of non-zero elements per row or column, respectively.</param>
            <param name="dirA">indicates whether to count the number of non-zero elements per row or per column, respectively.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
            <returns>total number of non-zero elements.</returns>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.NNZ(System.Int32,System.Int32,System.Double[],System.Int32[],Cudafy.Maths.SPARSE.cusparseMatDescr,Cudafy.Maths.SPARSE.cusparseDirection,System.Int32)">
            <summary>
            Computes the number of non-zero elements per row or column and the total number of non-zero elements.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="vector">array of size m or n containing the number of non-zero elements per row or column, respectively.</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="dirA">indicates whether to count the number of non-zero elements per row or per column, respectively.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
            <returns>total number of non-zero elements.</returns>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dense2CSR(System.Int32,System.Int32,System.Single[],System.Int32[],System.Single[],System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseMatDescr,System.Int32)">
            <summary>
            Converts the matrix A in dense format into a matrix in CSR format. All the parameters are pre-allocated by the user, and the arrays are filled in based on nnzPerRow.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="nnzPerRow">array of size m containing the number of non-zero elements per row.</param>
            <param name="csrValA">array of nnz elements to be filled.</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColIndA">array of nnz column indices, corresponding to the non-zero elements in the matrix.</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dense2CSR(System.Int32,System.Int32,System.Single[],System.Int32[],System.Single[],System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Converts the matrix A in dense format into a matrix in CSR format. All the parameters are pre-allocated by the user, and the arrays are filled in based on nnzPerRow.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="nnzPerRow">array of size m containing the number of non-zero elements per row.</param>
            <param name="csrValA">array of nnz elements to be filled.</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColIndA">array of nnz column indices, corresponding to the non-zero elements in the matrix.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dense2CSR(System.Int32,System.Int32,System.Double[],System.Int32[],System.Double[],System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseMatDescr,System.Int32)">
            <summary>
            Converts the matrix A in dense format into a matrix in CSR format. All the parameters are pre-allocated by the user, and the arrays are filled in based on nnzPerRow.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="nnzPerRow">array of size m containing the number of non-zero elements per row.</param>
            <param name="csrValA">array of nnz elements to be filled.</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColIndA">array of nnz column indices, corresponding to the non-zero elements in the matrix.</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dense2CSR(System.Int32,System.Int32,System.Double[],System.Int32[],System.Double[],System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Converts the matrix A in dense format into a matrix in CSR format. All the parameters are pre-allocated by the user, and the arrays are filled in based on nnzPerRow.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="nnzPerRow">array of size m containing the number of non-zero elements per row.</param>
            <param name="csrValA">array of nnz elements to be filled.</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColIndA">array of nnz column indices, corresponding to the non-zero elements in the matrix.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSR2Dense(System.Int32,System.Int32,System.Single[],System.Int32[],System.Int32[],System.Single[],Cudafy.Maths.SPARSE.cusparseMatDescr,System.Int32)">
            <summary>
            Converts the matrix in CSR format defined by the three arrays csrValA, csrRowA and csrColA into a matrix A in dense format.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowsA">array of m+1 index elements.</param>
            <param name="csrColsA">array of nnz column indices.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSR2Dense(System.Int32,System.Int32,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Int32)">
            <summary>
            Converts the matrix in CSR format defined by the three arrays csrValA, csrRowA and csrColA into a matrix A in dense format.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowsA">array of m+1 index elements.</param>
            <param name="csrColsA">array of nnz column indices.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSR2Dense(System.Int32,System.Int32,System.Double[],System.Int32[],System.Int32[],System.Double[],Cudafy.Maths.SPARSE.cusparseMatDescr,System.Int32)">
            <summary>
            Converts the matrix in CSR format defined by the three arrays csrValA, csrRowA and csrColA into a matrix A in dense format.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowsA">array of m+1 index elements.</param>
            <param name="csrColsa">array of nnz column indices.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSR2Dense(System.Int32,System.Int32,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Int32)">
            <summary>
            Converts the matrix in CSR format defined by the three arrays csrValA, csrRowA and csrColA into a matrix A in dense format.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowsA">array of m+1 index elements.</param>
            <param name="csrColsA">array of nnz column indices.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dense2CSC(System.Int32,System.Int32,System.Single[],System.Int32[],System.Single[],System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseMatDescr,System.Int32)">
            <summary>
            Converts the matrix A in dense format into a matrix in CSC format. All the parameters are pre-allocated by the user, and the arrays are filled in based nnzPerCol.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="nnzPerCol">>array of size m containing the number of non-zero elements per column.</param>
            <param name="cscValA">array of nnz elements to be filled.</param>
            <param name="cscRowIndA">array of nnz row indices, corresponding to the non-zero elements in the matrix.</param>
            <param name="cscColA">array of n+1 index elements.</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dense2CSC(System.Int32,System.Int32,System.Single[],System.Int32[],System.Single[],System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Converts the matrix A in dense format into a matrix in CSC format. All the parameters are pre-allocated by the user, and the arrays are filled in based nnzPerCol.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="nnzPerCol">>array of size m containing the number of non-zero elements per column.</param>
            <param name="cscValA">array of nnz elements to be filled.</param>
            <param name="cscRowIndA">array of nnz row indices, corresponding to the non-zero elements in the matrix.</param>
            <param name="cscColA">array of n+1 index elements.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dense2CSC(System.Int32,System.Int32,System.Double[],System.Int32[],System.Double[],System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseMatDescr,System.Int32)">
            <summary>
            Converts the matrix A in dense format into a matrix in CSC format. All the parameters are pre-allocated by the user, and the arrays are filled in based nnzPerCol.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="nnzPerCol">>array of size m containing the number of non-zero elements per column.</param>
            <param name="cscValA">array of nnz elements to be filled.</param>
            <param name="cscRowIndA">array of nnz row indices, corresponding to the non-zero elements in the matrix.</param>
            <param name="cscColA">array of n+1 index elements.</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.Dense2CSC(System.Int32,System.Int32,System.Double[],System.Int32[],System.Double[],System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Converts the matrix A in dense format into a matrix in CSC format. All the parameters are pre-allocated by the user, and the arrays are filled in based nnzPerCol.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="nnzPerCol">>array of size m containing the number of non-zero elements per column.</param>
            <param name="cscValA">array of nnz elements to be filled.</param>
            <param name="cscRowIndA">array of nnz row indices, corresponding to the non-zero elements in the matrix.</param>
            <param name="cscColA">array of n+1 index elements.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSC2Dense(System.Int32,System.Int32,System.Single[],System.Int32[],System.Int32[],System.Single[],Cudafy.Maths.SPARSE.cusparseMatDescr,System.Int32)">
            <summary>
            Converts the matrix in CSC format defined by the three arrays cscValA, cscColA and cscRowA into matrix A in dense format. The dense matrix A is filled in with the values of the sparse matrix and with zeros elsewhere.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="cscValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrColA[m] - csrColA[0].</param>
            <param name="cscRowA">array of nnz row indices.</param>
            <param name="cscColA">array of n+1 index elements.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSC2Dense(System.Int32,System.Int32,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Int32)">
            <summary>
            Converts the matrix in CSC format defined by the three arrays cscValA, cscColA and cscRowA into matrix A in dense format. The dense matrix A is filled in with the values of the sparse matrix and with zeros elsewhere.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="cscValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrColA[m] - csrColA[0].</param>
            <param name="cscRowA">array of nnz row indices.</param>
            <param name="cscColA">array of n+1 index elements.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSC2Dense(System.Int32,System.Int32,System.Double[],System.Int32[],System.Int32[],System.Double[],Cudafy.Maths.SPARSE.cusparseMatDescr,System.Int32)">
            <summary>
            Converts the matrix in CSC format defined by the three arrays cscValA, cscColA and cscRowA into matrix A in dense format. The dense matrix A is filled in with the values of the sparse matrix and with zeros elsewhere.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="cscValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrColA[m] - csrColA[0].</param>
            <param name="cscRowA">array of nnz row indices.</param>
            <param name="cscColA">array of n+1 index elements.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSC2Dense(System.Int32,System.Int32,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Int32)">
            <summary>
            Converts the matrix in CSC format defined by the three arrays cscValA, cscColA and cscRowA into matrix A in dense format. The dense matrix A is filled in with the values of the sparse matrix and with zeros elsewhere.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="cscValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrColA[m] - csrColA[0].</param>
            <param name="cscRowA">array of nnz row indices.</param>
            <param name="cscColA">array of n+1 index elements.</param>
            <param name="A">array of dimension (lda, n)</param>
            <param name="lda">leading dimension of A. If lda is 0, automatically be m.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSR2CSC(System.Int32,System.Int32,System.Int32,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseAction,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Converts the matrix in CSR format defined with the three arrays csrVal, csrRow and csrCol into matrix A in CSC format defined by array cscVal, cscRow, cscCol.
            The resultng matrix can also be seen as the transpose of the original sparse matrix. This routine can also be used to convert a matrix in CSC format into a matrix in CSR format.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="csrVal">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRow[m] - csrRow[0].</param>
            <param name="csrRow">array of m+1 indices.</param>
            <param name="csrCol">array of nnz column indices.</param>
            <param name="cscVal">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrCol[n] - csrCol[0]. if copyValues is non-zero, updated array.</param>
            <param name="cscRow">updated array of nnz row indices.</param>
            <param name="cscCol">updated array of n+1 index elements.</param>
            <param name="copyValues">if Symbloic, cscVal array is not filled.</param>
            <param name="bs">base index.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSR2CSC(System.Int32,System.Int32,System.Int32,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseAction,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Converts the matrix in CSR format defined with the three arrays csrVal, csrRow and csrCol into matrix A in CSC format defined by array cscVal, cscRow, cscCol.
            The resultng matrix can also be seen as the transpose of the original sparse matrix. This routine can also be used to convert a matrix in CSC format into a matrix in CSR format.
            </summary>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="n">number of columns of the matrix A; n must be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="csrVal">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRow[m] - csrRow[0].</param>
            <param name="csrRow">array of m+1 indices.</param>
            <param name="csrCol">array of nnz column indices.</param>
            <param name="cscVal">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrCol[n] - csrCol[0]. if copyValues is non-zero, updated array.</param>
            <param name="cscRow">updated array of nnz row indices.</param>
            <param name="cscCol">updated array of n+1 index elements.</param>
            <param name="copyValues">if Symbloic, cscVal array is not filled.</param>
            <param name="bs">base index.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.COO2CSR(System.Int32,System.Int32,System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Converts the array containing the uncompressed row indices (corresponding to COO format) into an array of compressed row pointers (corresponding to CSR format).
            It can also be used to convert the array containing the uncompressed column indices (corresponding to COO format) into an array of column pointers (corresponding to CSC format).
            </summary>
            <param name="nnz">number of non-zeros of the matrix in COO format; this is also the length of array cooRow.</param>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="cooRow">array of row indices.</param>
            <param name="csrRow">array of row pointers.</param>
            <param name="idxBase">base index.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSR2COO(System.Int32,System.Int32,System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Converts the array containing the compressed row pointers (corresponding to CSR format) into an array of uncompressed row indices ( corresponding to COO format).
            It can also be used to convert the array containing the compressed column pointers (corresponding to CSC format) into an array of uncompressed column indices (corresponding to COO format).
            </summary>
            <param name="nnz">number of non-zeros of the matrix in COO format; this is also the length of array cooRow</param>
            <param name="m">number of rows of the matrix A; m must be at least zero.</param>
            <param name="csrRow">array of compressed row pointers.</param>
            <param name="cooRow">array of umcompressed row indices.</param>
            <param name="idxBase">base index.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.AXPY(System.Single@,System.Single[],System.Int32[],System.Single[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Multiplies the vector x in sparse format by the constant alpha and adds
            the result to the vector y in dense format.
            y = alpha * x + y
            </summary>
            <param name="alpha">constant multiplier.</param>
            <param name="vectorx">non-zero values of vector x.</param>
            <param name="indexx">indices corresponding to non‐zero values of vector x.</param>
            <param name="vectory">initial vector in dense format.</param>
            <param name="nnz">number of elements of the vector x (set to 0 for all elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.AXPY(System.Double@,System.Double[],System.Int32[],System.Double[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Multiplies the vector x in sparse format by the constant alpha and adds
            the result to the vector y in dense format.
            y = alpha * x + y
            </summary>
            <param name="alpha">constant multiplier.</param>
            <param name="vectorx">non-zero values of vector x.</param>
            <param name="indexx">indices corresponding to non‐zero values of vector x.</param>
            <param name="vectory">initial vector in dense format.</param>
            <param name="nnz">number of elements of the vector x (set to 0 for all elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.DOT(System.Single[],System.Int32[],System.Single[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Returns the dot product of a vector x in sparse format and vector y in dense format.
            For i = 0 to n-1
                result += x[i] * y[i]
            </summary>
            <param name="vectorx">non-zero values of vector x.</param>
            <param name="indexx">indices corresponding to non-zero values of vector x.</param>
            <param name="vectory">vector in dense format.</param>
            <param name="n">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
            <returns>result.</returns>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.DOT(System.Double[],System.Int32[],System.Double[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Returns the dot product of a vector x in sparse format and vector y in dense format.
            For i = 0 to n-1
                result += x[i] * y[i]
            </summary>
            <param name="vectorx">non-zero values of vector x.</param>
            <param name="indexx">indices corresponding to non-zero values of vector x.</param>
            <param name="vectory">vector in dense format.</param>
            <param name="n">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
            <returns>result.</returns>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.GTHR(System.Single[],System.Single[],System.Int32[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Gathers the elements of the vector y listed by the index array indexx into the array vectorx.
            x[i] = y[i]
            </summary>
            <param name="vectory">vector in dense format, of size greater than or equal to max(indexx)-idxBase+1</param>
            <param name="vectorx">pre-allocated array in device memory of size greater than or equal to nnz</param>
            <param name="indexx">indices corresponding to non-zero values of vector x.</param>
            <param name="nnz">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.GTHR(System.Double[],System.Double[],System.Int32[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Gathers the elements of the vector y listed by the index array indexx into the array vectorx.
            x[i] = y[i]
            </summary>
            <param name="vectory">vector in dense format, of size greater than or equal to max(indexx)-idxBase+1</param>
            <param name="vectorx">pre-allocated array in device memory of size greater than or equal to nnz</param>
            <param name="indexx">indices corresponding to non-zero values of vector x.</param>
            <param name="nnz">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.GTHRZ(System.Single[],System.Single[],System.Int32[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Gathers the elements of the vector y listed by the index array indexx into the array vectorx, and zeroes those elements in the vector y.
            x[i] = y[i]
            y[i] = 0
            </summary>
            <param name="vectory">vector in dense format, of size greater than or equal to max(indexx)-idxBase+1.</param>
            <param name="vectorx">pre-allocated array in device memory of size greater than or equal to nnz.</param>
            <param name="indexx">indices corresponding to non-zero values of vector x.</param>
            <param name="nnz">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.GTHRZ(System.Double[],System.Double[],System.Int32[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Gathers the elements of the vector y listed by the index array indexx into the array vectorx, and zeroes those elements in the vector y.
            x[i] = y[i]
            y[i] = 0
            </summary>
            <param name="vectory">vector in dense format, of size greater than or equal to max(indexx)-idxBase+1.</param>
            <param name="vectorx">pre-allocated array in device memory of size greater than or equal to nnz.</param>
            <param name="indexx">indices corresponding to non-zero values of vector x.</param>
            <param name="nnz">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.ROT(System.Single[],System.Int32[],System.Single[],System.Single@,System.Single@,System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Applies givens rotation, defined by values c and s, to vectors x in sparse and y in dense format.
            x[i] = c * x[i] + s * y[i];
            y[i] = c * y[i] - s * x[i];
            </summary>
            <param name="vectorx">non-zero values of the vector x.</param>
            <param name="indexx">indices correspoding to non-zero values of vector x.</param>
            <param name="vectory">vector in dense format.</param>
            <param name="c">scalar</param>
            <param name="s">scalar</param>
            <param name="nnz">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.ROT(System.Double[],System.Int32[],System.Double[],System.Double@,System.Double@,System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Applies givens rotation, defined by values c and s, to vectors x in sparse and y in dense format.
            x[i] = c * x[i] + s * y[i];
            y[i] = c * y[i] - s * x[i];
            </summary>
            <param name="vectorx">non-zero values of the vector x.</param>
            <param name="indexx">indices correspoding to non-zero values of vector x.</param>
            <param name="vectory">vector in dense format.</param>
            <param name="c">scalar</param>
            <param name="s">scalar</param>
            <param name="nnz">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.SCTR(System.Single[],System.Int32[],System.Single[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Scatters the vector x in sparse format into the vector y in dense format.
            It modifies only the lements of y whose indices are listed in the array indexx.
            y[i] = x[i]
            </summary>
            <param name="vectorx">non-zero values of vector x.</param>
            <param name="indexx">indices correspoding to non-zero values of vector x.</param>
            <param name="vectory">pre-allocated vector in dense format, of size greater than or equal to max(indexx)-ibase+1.</param>
            <param name="nnz">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.SCTR(System.Double[],System.Int32[],System.Double[],System.Int32,Cudafy.Maths.SPARSE.cusparseIndexBase)">
            <summary>
            Scatters the vector x in sparse format into the vector y in dense format.
            It modifies only the lements of y whose indices are listed in the array indexx.
            y[i] = x[i]
            </summary>
            <param name="vectorx">non-zero values of vector x.</param>
            <param name="indexx">indices correspoding to non-zero values of vector x.</param>
            <param name="vectory">pre-allocated vector in dense format, of size greater than or equal to max(indexx)-ibase+1.</param>
            <param name="nnz">number of non-zero elements of the vector x (set to 0 for all non-zero elements).</param>
            <param name="ibase">The index base.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRMV(System.Int32,System.Int32,System.Int32,System.Single@,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Single@,System.Single[],Cudafy.Maths.SPARSE.cusparseMatDescr,Cudafy.Maths.SPARSE.cusparseOperation)">
            <summary>
            Performs one of the matrix-vector operations.
            y = alpha * op(A) * x + beta * y
            </summary>
            <param name="m">specifies the number of rows of matrix A; m mmust be at least zero.</param>
            <param name="n">specifies the number of columns of matrix A; n mmust be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="alpha">scalar multiplier applied to op(A) * x.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be ontained from csrRow[m] - csrRow[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="x">vector of n elements if op(A) = A, and m elements if op(A) = transpose(A).</param>
            <param name="beta">scalar multiplier applied to y. If beta is zero, y does not have to be a valid input.</param>
            <param name="y">vector of m elements if op(A) = A, and n elements if op(A) = transpose(A).</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="op">specifies op(A).</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRMV(System.Int32,System.Int32,System.Int32,System.Single@,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Single@,System.Single[],Cudafy.Maths.SPARSE.cusparseOperation)">
            <summary>
            Performs one of the matrix-vector operations.
            y = alpha * op(A) * x + beta * y
            </summary>
            <param name="m">specifies the number of rows of matrix A; m mmust be at least zero.</param>
            <param name="n">specifies the number of columns of matrix A; n mmust be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="alpha">scalar multiplier applied to op(A) * x.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be ontained from csrRow[m] - csrRow[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="x">vector of n elements if op(A) = A, and m elements if op(A) = transpose(A).</param>
            <param name="beta">scalar multiplier applied to y. If beta is zero, y does not have to be a valid input.</param>
            <param name="y">vector of m elements if op(A) = A, and n elements if op(A) = transpose(A).</param>
            <param name="op">specifies op(A).</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRMV(System.Int32,System.Int32,System.Int32,System.Double@,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Double@,System.Double[],Cudafy.Maths.SPARSE.cusparseMatDescr,Cudafy.Maths.SPARSE.cusparseOperation)">
            <summary>
            Performs one of the matrix-vector operations.
            y = alpha * op(A) * x + beta * y
            </summary>
            <param name="m">specifies the number of rows of matrix A; m mmust be at least zero.</param>
            <param name="n">specifies the number of columns of matrix A; n mmust be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="alpha">scalar multiplier applied to op(A) * x.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be ontained from csrRow[m] - csrRow[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="x">vector of n elements if op(A) = A, and m elements if op(A) = transpose(A).</param>
            <param name="beta">scalar multiplier applied to y. If beta is zero, y does not have to be a valid input.</param>
            <param name="y">vector of m elements if op(A) = A, and n elements if op(A) = transpose(A).</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="op">specifies op(A).</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRMV(System.Int32,System.Int32,System.Int32,System.Double@,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Double@,System.Double[],Cudafy.Maths.SPARSE.cusparseOperation)">
            <summary>
            Performs one of the matrix-vector operations.
            y = alpha * op(A) * x + beta * y
            </summary>
            <param name="m">specifies the number of rows of matrix A; m mmust be at least zero.</param>
            <param name="n">specifies the number of columns of matrix A; n mmust be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="alpha">scalar multiplier applied to op(A) * x.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be ontained from csrRow[m] - csrRow[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="x">vector of n elements if op(A) = A, and m elements if op(A) = transpose(A).</param>
            <param name="beta">scalar multiplier applied to y. If beta is zero, y does not have to be a valid input.</param>
            <param name="y">vector of m elements if op(A) = A, and n elements if op(A) = transpose(A).</param>
            <param name="op">specifies op(A).</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRSV_ANALYSIS(System.Int32,System.Int32,System.Single[],System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseOperation,Cudafy.Maths.SPARSE.cusparseSolveAnalysisInfo,Cudafy.Maths.SPARSE.cusparseMatDescr)">
            <summary>
            Performs the analysis phase of the solution of a sparse triangular linear system.
            op(A) * y = alpha * x
            </summary>
            <param name="m">specifies the number of rows and columns of matrix A; m must be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRow[m] - csrRow[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="op">specifies op(A).</param>
            <param name="info">structure that stores the information collected during the analysis phase. It should be passed to the solve phase unchanged.</param>
            <param name="descrA">descriptor of matrix A.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRSV_ANALYSIS(System.Int32,System.Int32,System.Double[],System.Int32[],System.Int32[],Cudafy.Maths.SPARSE.cusparseOperation,Cudafy.Maths.SPARSE.cusparseSolveAnalysisInfo,Cudafy.Maths.SPARSE.cusparseMatDescr)">
            <summary>
            Performs the analysis phase of the solution of a sparse triangular linear system.
            op(A) * y = alpha * x
            </summary>
            <param name="m">specifies the number of rows and columns of matrix A; m must be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRow[m] - csrRow[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="op">specifies op(A).</param>
            <param name="info">structure that stores the information collected during the analysis phase. It should be passed to the solve phase unchanged.</param>
            <param name="descrA">descriptor of matrix A.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRSV_SOLVE(System.Int32,System.Single@,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Single[],Cudafy.Maths.SPARSE.cusparseOperation,Cudafy.Maths.SPARSE.cusparseSolveAnalysisInfo,Cudafy.Maths.SPARSE.cusparseMatDescr)">
            <summary>
            Performs the solve phase of the solution of a sparse triangular linear system.
            op(A) * y = alpha * x
            </summary>
            <param name="m">specifies the number of rows and columns of matrix A; m must be at least zero.</param>
            <param name="alpha">scalar multiplier applied to x.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRow[m] - csrRow[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="x">vector of m elements.</param>
            <param name="y">vector of m elements. updated according to op(A) * y = alpha * x</param>
            <param name="op">specifies op(A).</param>
            <param name="info">structure that stores the information collected during the analysis phase. It should be passed to the solve phase unchanged.</param>
            <param name="descrA">descriptor of matrix A.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRSV_SOLVE(System.Int32,System.Double@,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Double[],Cudafy.Maths.SPARSE.cusparseOperation,Cudafy.Maths.SPARSE.cusparseSolveAnalysisInfo,Cudafy.Maths.SPARSE.cusparseMatDescr)">
            <summary>
            Performs the solve phase of the solution of a sparse triangular linear system.
            op(A) * y = alpha * x
            </summary>
            <param name="m">specifies the number of rows and columns of matrix A; m must be at least zero.</param>
            <param name="alpha">scalar multiplier applied to x.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRow[m] - csrRow[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="x">vector of m elements.</param>
            <param name="y">vector of m elements. updated according to op(A) * y = alpha * x</param>
            <param name="op">specifies op(A).</param>
            <param name="info">structure that stores the information collected during the analysis phase. It should be passed to the solve phase unchanged.</param>
            <param name="descrA">descriptor of matrix A.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRMM(System.Int32,System.Int32,System.Int32,System.Int32,System.Single@,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Single@,System.Single[],Cudafy.Maths.SPARSE.cusparseMatDescr,Cudafy.Maths.SPARSE.cusparseOperation,System.Int32,System.Int32)">
            <summary>
            Performs matrix-matrix operations. A is CSR format matrix and B, C is dense format.
            C = alpha * op(A) * B + beta * C
            </summary>
            <param name="m">number of rows of matrix A; m must be at least zero.</param>
            <param name="k">number of columns of matrix A; k must be at least zero.</param>
            <param name="n">number of columns of matrices B and C; n must be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="alpha">scalar multiplier applied to op(A) * B.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="B">array of dimension (ldb, n).</param>
            <param name="beta">scalar multiplier applied to C. If beta is zero, C does not have to be a valid input.</param>
            <param name="C">array of dimension (ldc, n).</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="op">specifies op(A).</param>
            <param name="ldb">leading dimension of B.</param>
            <param name="ldc">leading dimension of C.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRMM(System.Int32,System.Int32,System.Int32,System.Int32,System.Single@,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Single@,System.Single[],Cudafy.Maths.SPARSE.cusparseOperation,System.Int32,System.Int32)">
            <summary>
            Performs matrix-matrix operations. A is CSR format matrix and B, C is dense format.
            C = alpha * op(A) * B + beta * C
            </summary>
            <param name="m">number of rows of matrix A; m must be at least zero.</param>
            <param name="k">number of columns of matrix A; k must be at least zero.</param>
            <param name="n">number of columns of matrices B and C; n must be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="alpha">scalar multiplier applied to op(A) * B.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="B">array of dimension (ldb, n).</param>
            <param name="beta">scalar multiplier applied to C. If beta is zero, C does not have to be a valid input.</param>
            <param name="C">array of dimension (ldc, n).</param>
            <param name="op">specifies op(A).</param>
            <param name="ldb">leading dimension of B.</param>
            <param name="ldc">leading dimension of C.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRMM(System.Int32,System.Int32,System.Int32,System.Int32,System.Double@,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Double@,System.Double[],Cudafy.Maths.SPARSE.cusparseMatDescr,Cudafy.Maths.SPARSE.cusparseOperation,System.Int32,System.Int32)">
            <summary>
            Performs matrix-matrix operations. A is CSR format matrix and B, C is dense format.
            C = alpha * op(A) * B + beta * C
            </summary>
            <param name="m">number of rows of matrix A; m must be at least zero.</param>
            <param name="k">number of columns of matrix A; k must be at least zero.</param>
            <param name="n">number of columns of matrices B and C; n must be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="alpha">scalar multiplier applied to op(A) * B.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="B">array of dimension (ldb, n).</param>
            <param name="beta">scalar multiplier applied to C. If beta is zero, C does not have to be a valid input.</param>
            <param name="C">array of dimension (ldc, n).</param>
            <param name="descrA">descriptor of matrix A.</param>
            <param name="op">specifies op(A).</param>
            <param name="ldb">leading dimension of B.</param>
            <param name="ldc">leading dimension of C.</param>
        </member>
        <member name="M:Cudafy.Maths.SPARSE.GPGPUSPARSE.CSRMM(System.Int32,System.Int32,System.Int32,System.Int32,System.Double@,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Double@,System.Double[],Cudafy.Maths.SPARSE.cusparseOperation,System.Int32,System.Int32)">
            <summary>
            Performs matrix-matrix operations. A is CSR format matrix and B, C is dense format.
            C = alpha * op(A) * B + beta * C
            </summary>
            <param name="m">number of rows of matrix A; m must be at least zero.</param>
            <param name="k">number of columns of matrix A; k must be at least zero.</param>
            <param name="n">number of columns of matrices B and C; n must be at least zero.</param>
            <param name="nnz">number of non-zero elements of matrix A.</param>
            <param name="alpha">scalar multiplier applied to op(A) * B.</param>
            <param name="csrValA">array of nnz elements, where nnz is the number of non-zero elements and can be obtained from csrRowA[m] - csrRowA[0].</param>
            <param name="csrRowA">array of m+1 index elements.</param>
            <param name="csrColA">array of nnz column indices.</param>
            <param name="B">array of dimension (ldb, n).</param>
            <param name="beta">scalar multiplier applied to C. If beta is zero, C does not have to be a valid input.</param>
            <param name="C">array of dimension (ldc, n).</param>
            <param name="op">specifies op(A).</param>
            <param name="ldb">leading dimension of B.</param>
            <param name="ldc">leading dimension of C.</param>
        </member>
        <member name="P:Cudafy.Maths.SPARSE.GPGPUSPARSE.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.CUSPARSEStatus">
            <summary>
            This is a status type returned by the library functions.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.CUSPARSEStatus.Success">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.CUSPARSEStatus.NotInitialized">
            <summary>
            The CUSPARSE library was not initialized.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseAction">
            <summary>
            This type indicates whether the operation is performed only on indices or on data and indices.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseAction.Symbolic">
            <summary>
            The operation is performed only on indices.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseAction.Numeric">
            <summary>
            The operation is performed on data and indices.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseDiagType">
            <summary>
            This type indicates if the matrix diagonal entries are unity.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseDiagType.NonUnit">
            <summary>
            The matrix diagonal has non-unit elements.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseDiagType.Unit">
            <summary>
            The matrix diagonal has unit elements.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseDirection">
            <summary>
            This type indicates whether the elements of a dense matrix should be parsed by rows or by columns.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseDirection.Row">
            <summary>
            The matrix should be parsed by rows.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseDirection.Column">
            <summary>
            The matrix should be parsed by columns.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseFillMode">
            <summary>
            This type indicates if the lower or upper part of a matrix is stored in sparse storage.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseFillMode.Lower">
            <summary>
            The lower triangular part is stored.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseFillMode.Upper">
            <summary>
            The upper triangular part is stored.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseHandle">
            <summary>
            This is a pointer type to an opaque CUSPARSE context, which the user must initialize by calling cusparseCreate() prior to calling any other library function.
            The Handle created and retruned by cusparseCreate() must be passed to every CUSPARSE function.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseIndexBase">
            <summary>
            This is type indicates if the base of the matrix indices is zero or one.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseIndexBase.Zero">
            <summary>
            The base index is zero.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseIndexBase.One">
            <summary>
            The base index is one.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseMatDescr">
            <summary>
            The structure is used to describe the shape and properties of a matrix.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseMatrixType">
            <summary>
            This type indicates the type of matrix stored in sparse storage. Notice that for symmetric, Hermitian and triangular matrices only their lower or upper part is assumed to be stored.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseMatrixType.General">
            <summary>
            The matrix is general.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseMatrixType.Symmetric">
            <summary>
            The matrix is symmetric.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseMatrixType.Hermitian">
            <summary>
            The matrix is Hermitian.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseMatrixType.Triangular">
            <summary>
            The matrix is triangular.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseOperation">
            <summary>
            This type indicates which operations need to be performed with sparse matrix.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseOperation.NonTranspose">
            <summary>
            The non-transpose operation is selected.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseOperation.Transpose">
            <summary>
            The transpose operation is selected.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparseOperation.ConjugateTranspose">
            <summary>
            The conjugate transpose operation is selected.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparsePointerMode">
            <summary>
            This type indicates whether the scalar values are passed by reference on the host or device.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparsePointerMode.Host">
            <summary>
            The scalars are passed by reference on the host.
            </summary>
        </member>
        <member name="F:Cudafy.Maths.SPARSE.cusparsePointerMode.Device">
            <summary>
            The scalars are passed by reference on the device.
            </summary>
        </member>
        <member name="T:Cudafy.Maths.SPARSE.cusparseSolveAnalysisInfo">
            <summary>
            This is a pointer type to an opaque structure holding the information collected in the analysis phase of the solution of the sparse triangular linear system.
            It is expected to be passed unchanged to the solution phase of the sparse triangular linear system.
            </summary>
        </member>
    </members>
</doc>
